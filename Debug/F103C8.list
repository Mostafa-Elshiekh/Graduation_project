
F103C8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029e0  08000130  08000130  00010130  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08002b10  08002b10  00012b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ba4  08002ba4  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08002ba4  08002ba4  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ba4  08002ba4  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ba4  08002ba4  00012ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ba8  08002ba8  00012ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08002bac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000045e4  20000008  08002bb4  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200045ec  08002bb4  000245ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b199  00000000  00000000  00020031  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b0f  00000000  00000000  0002b1ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00002898  00000000  00000000  0002ccd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000005d0  00000000  00000000  0002f578  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000004f8  00000000  00000000  0002fb48  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000438c  00000000  00000000  00030040  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000060c1  00000000  00000000  000343cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00013348  00000000  00000000  0003a48d  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0004d7d5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001490  00000000  00000000  0004d850  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000008 	.word	0x20000008
 800014c:	00000000 	.word	0x00000000
 8000150:	08002af8 	.word	0x08002af8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000000c 	.word	0x2000000c
 800016c:	08002af8 	.word	0x08002af8

08000170 <__aeabi_f2iz>:
 8000170:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000174:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000178:	d30f      	bcc.n	800019a <__aeabi_f2iz+0x2a>
 800017a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800017e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000182:	d90d      	bls.n	80001a0 <__aeabi_f2iz+0x30>
 8000184:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000188:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800018c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000190:	fa23 f002 	lsr.w	r0, r3, r2
 8000194:	bf18      	it	ne
 8000196:	4240      	negne	r0, r0
 8000198:	4770      	bx	lr
 800019a:	f04f 0000 	mov.w	r0, #0
 800019e:	4770      	bx	lr
 80001a0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80001a4:	d101      	bne.n	80001aa <__aeabi_f2iz+0x3a>
 80001a6:	0242      	lsls	r2, r0, #9
 80001a8:	d105      	bne.n	80001b6 <__aeabi_f2iz+0x46>
 80001aa:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80001ae:	bf08      	it	eq
 80001b0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80001b4:	4770      	bx	lr
 80001b6:	f04f 0000 	mov.w	r0, #0
 80001ba:	4770      	bx	lr

080001bc <main>:
void vxWheelChair_WhichCommands_Handler(void* params);



int main(void)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b08a      	sub	sp, #40	; 0x28
 80001c0:	af02      	add	r7, sp, #8
	RCC_GPIOA_CLOCK_EN();
 80001c2:	4b59      	ldr	r3, [pc, #356]	; (8000328 <main+0x16c>)
 80001c4:	699b      	ldr	r3, [r3, #24]
 80001c6:	4a58      	ldr	r2, [pc, #352]	; (8000328 <main+0x16c>)
 80001c8:	f043 0304 	orr.w	r3, r3, #4
 80001cc:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLOCK_EN();
 80001ce:	4b56      	ldr	r3, [pc, #344]	; (8000328 <main+0x16c>)
 80001d0:	699b      	ldr	r3, [r3, #24]
 80001d2:	4a55      	ldr	r2, [pc, #340]	; (8000328 <main+0x16c>)
 80001d4:	f043 0308 	orr.w	r3, r3, #8
 80001d8:	6193      	str	r3, [r2, #24]
	RCC_GPIOC_CLOCK_EN();
 80001da:	4b53      	ldr	r3, [pc, #332]	; (8000328 <main+0x16c>)
 80001dc:	699b      	ldr	r3, [r3, #24]
 80001de:	4a52      	ldr	r2, [pc, #328]	; (8000328 <main+0x16c>)
 80001e0:	f043 0310 	orr.w	r3, r3, #16
 80001e4:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLOCK_EN();
 80001e6:	4b50      	ldr	r3, [pc, #320]	; (8000328 <main+0x16c>)
 80001e8:	699b      	ldr	r3, [r3, #24]
 80001ea:	4a4f      	ldr	r2, [pc, #316]	; (8000328 <main+0x16c>)
 80001ec:	f043 0301 	orr.w	r3, r3, #1
 80001f0:	6193      	str	r3, [r2, #24]
	/* PA2  ->TX
	 * PA3 ->RX
	 * PA0 ->CTS
	 * PA1 ->RTS*/
	USART_Config uartCFG;
	uartCFG.BaudRate = USART_BaudRate_115200;
 80001f2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80001f6:	613b      	str	r3, [r7, #16]
	uartCFG.HW_FlowCtrl = USART_HW_FlowCtrl_NONE;
 80001f8:	2300      	movs	r3, #0
 80001fa:	75fb      	strb	r3, [r7, #23]
	uartCFG.IRQ_Enable = USART_IRQ_Enable_RXNE;
 80001fc:	2320      	movs	r3, #32
 80001fe:	763b      	strb	r3, [r7, #24]
	uartCFG.P_IRQ_Call_Back = Raspberry_CMDS_CallBack;
 8000200:	4b4a      	ldr	r3, [pc, #296]	; (800032c <main+0x170>)
 8000202:	61fb      	str	r3, [r7, #28]
	uartCFG.Parity = USART_Parity_NONE;
 8000204:	2300      	movs	r3, #0
 8000206:	757b      	strb	r3, [r7, #21]
	uartCFG.PayLoad_Length = USART_PayLoad_Length_8B;
 8000208:	2300      	movs	r3, #0
 800020a:	753b      	strb	r3, [r7, #20]
	uartCFG.StopBits = USART_StopBits_1;
 800020c:	2300      	movs	r3, #0
 800020e:	75bb      	strb	r3, [r7, #22]
	uartCFG.USART_MODE = USART_MODE_RX_AND_TX;
 8000210:	230c      	movs	r3, #12
 8000212:	733b      	strb	r3, [r7, #12]
	MCAL_UART_INIT(USART2, &uartCFG);
 8000214:	f107 030c 	add.w	r3, r7, #12
 8000218:	4619      	mov	r1, r3
 800021a:	4845      	ldr	r0, [pc, #276]	; (8000330 <main+0x174>)
 800021c:	f001 fe22 	bl	8001e64 <MCAL_UART_INIT>
	MCAL_UART_GPIO_Set_Pins(USART2);
 8000220:	4843      	ldr	r0, [pc, #268]	; (8000330 <main+0x174>)
 8000222:	f001 ff7f 	bl	8002124 <MCAL_UART_GPIO_Set_Pins>
	//================================================================//


	Ultrasonic_GPIO_Init();
 8000226:	f002 fc01 	bl	8002a2c <Ultrasonic_GPIO_Init>
	Motor1_Init();
 800022a:	f002 fb21 	bl	8002870 <Motor1_Init>
	Motor2_Init();
 800022e:	f002 fb65 	bl	80028fc <Motor2_Init>
	Timer1_Init_PWM();//PWM
 8000232:	f002 fa43 	bl	80026bc <Timer1_Init_PWM>
	Timer2_init(); //for delay
 8000236:	f002 f9cb 	bl	80025d0 <Timer2_init>
	Timer3_init();//for ultersonic
 800023a:	f002 fa1d 	bl	8002678 <Timer3_init>

    Buzzer_Init();
 800023e:	f002 fadd 	bl	80027fc <Buzzer_Init>

	//LED AS ALRARM WHEN DESTANCE <=40CM
	GPIO_Pin_Configure_t PinCfg;
	PinCfg.GPIO_Pin_Number=GPIO_PIN_11;
 8000242:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000246:	813b      	strh	r3, [r7, #8]
	PinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 8000248:	2304      	movs	r3, #4
 800024a:	72bb      	strb	r3, [r7, #10]
	PinCfg.GPIO_OUTPUT_SPEED=GPIO_SPEED_10M;
 800024c:	2301      	movs	r3, #1
 800024e:	72fb      	strb	r3, [r7, #11]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000250:	f107 0308 	add.w	r3, r7, #8
 8000254:	4619      	mov	r1, r3
 8000256:	4837      	ldr	r0, [pc, #220]	; (8000334 <main+0x178>)
 8000258:	f002 f8c5 	bl	80023e6 <MCAL_GPIO_Init>


	//Infrared Sensor to detecte the closed object
	GPIO_Pin_Configure_t PinCfg_Infrared;
	PinCfg_Infrared.GPIO_Pin_Number=GPIO_PIN_10;
 800025c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000260:	80bb      	strh	r3, [r7, #4]
	PinCfg_Infrared.GPIO_MODE=GPIO_MODE_INPUT_PU;
 8000262:	2302      	movs	r3, #2
 8000264:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(GPIOB, &PinCfg_Infrared);
 8000266:	1d3b      	adds	r3, r7, #4
 8000268:	4619      	mov	r1, r3
 800026a:	4832      	ldr	r0, [pc, #200]	; (8000334 <main+0x178>)
 800026c:	f002 f8bb 	bl	80023e6 <MCAL_GPIO_Init>
	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8000270:	2200      	movs	r2, #0
 8000272:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000276:	482f      	ldr	r0, [pc, #188]	; (8000334 <main+0x178>)
 8000278:	f002 f930 	bl	80024dc <MCAL_GPIO_WritePin>

	//Led To Indicate Forward
	GPIO_Pin_Configure_t PinCfg_Forward;
	PinCfg_Forward.GPIO_Pin_Number=GPIO_PIN_13;
 800027c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000280:	803b      	strh	r3, [r7, #0]
	PinCfg_Forward.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 8000282:	2304      	movs	r3, #4
 8000284:	70bb      	strb	r3, [r7, #2]
	PinCfg_Forward.GPIO_OUTPUT_SPEED=GPIO_SPEED_10M;
 8000286:	2301      	movs	r3, #1
 8000288:	70fb      	strb	r3, [r7, #3]
	MCAL_GPIO_Init(GPIOC, &PinCfg_Forward);
 800028a:	463b      	mov	r3, r7
 800028c:	4619      	mov	r1, r3
 800028e:	482a      	ldr	r0, [pc, #168]	; (8000338 <main+0x17c>)
 8000290:	f002 f8a9 	bl	80023e6 <MCAL_GPIO_Init>
	MCAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8000294:	2200      	movs	r2, #0
 8000296:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800029a:	4827      	ldr	r0, [pc, #156]	; (8000338 <main+0x17c>)
 800029c:	f002 f91e 	bl	80024dc <MCAL_GPIO_WritePin>



    /*===============Tasks Creation===============*/
	xTaskCreate(vUltrasonic_Handler ,"Ultrasonic" ,configMINIMAL_STACK_SIZE,NULL ,5,&xUltrasonicHandle) ;
 80002a0:	4b26      	ldr	r3, [pc, #152]	; (800033c <main+0x180>)
 80002a2:	9301      	str	r3, [sp, #4]
 80002a4:	2305      	movs	r3, #5
 80002a6:	9300      	str	r3, [sp, #0]
 80002a8:	2300      	movs	r3, #0
 80002aa:	2280      	movs	r2, #128	; 0x80
 80002ac:	4924      	ldr	r1, [pc, #144]	; (8000340 <main+0x184>)
 80002ae:	4825      	ldr	r0, [pc, #148]	; (8000344 <main+0x188>)
 80002b0:	f000 fc10 	bl	8000ad4 <xTaskCreate>

	xTaskCreate(vWheelChair_Forward_Handler ,"WheelChairForward" ,configMINIMAL_STACK_SIZE,NULL ,4,&xWheelChair_ForwardHandle) ;
 80002b4:	4b24      	ldr	r3, [pc, #144]	; (8000348 <main+0x18c>)
 80002b6:	9301      	str	r3, [sp, #4]
 80002b8:	2304      	movs	r3, #4
 80002ba:	9300      	str	r3, [sp, #0]
 80002bc:	2300      	movs	r3, #0
 80002be:	2280      	movs	r2, #128	; 0x80
 80002c0:	4922      	ldr	r1, [pc, #136]	; (800034c <main+0x190>)
 80002c2:	4823      	ldr	r0, [pc, #140]	; (8000350 <main+0x194>)
 80002c4:	f000 fc06 	bl	8000ad4 <xTaskCreate>
	vTaskSuspend(xWheelChair_ForwardHandle);
 80002c8:	4b1f      	ldr	r3, [pc, #124]	; (8000348 <main+0x18c>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4618      	mov	r0, r3
 80002ce:	f000 fd71 	bl	8000db4 <vTaskSuspend>


	xTaskCreate(vWheelChair_Backward_Handler,"WheelChairBackward",configMINIMAL_STACK_SIZE,NULL ,2,&xWheelChair_BackwardHandle) ;
 80002d2:	4b20      	ldr	r3, [pc, #128]	; (8000354 <main+0x198>)
 80002d4:	9301      	str	r3, [sp, #4]
 80002d6:	2302      	movs	r3, #2
 80002d8:	9300      	str	r3, [sp, #0]
 80002da:	2300      	movs	r3, #0
 80002dc:	2280      	movs	r2, #128	; 0x80
 80002de:	491e      	ldr	r1, [pc, #120]	; (8000358 <main+0x19c>)
 80002e0:	481e      	ldr	r0, [pc, #120]	; (800035c <main+0x1a0>)
 80002e2:	f000 fbf7 	bl	8000ad4 <xTaskCreate>
	vTaskSuspend(xWheelChair_BackwardHandle);
 80002e6:	4b1b      	ldr	r3, [pc, #108]	; (8000354 <main+0x198>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	4618      	mov	r0, r3
 80002ec:	f000 fd62 	bl	8000db4 <vTaskSuspend>

	xTaskCreate(vWheelChair_Stop_Handler ,"WheelChairStop",configMINIMAL_STACK_SIZE,NULL ,3 ,&xWheelChair_StopHandle) ;
 80002f0:	4b1b      	ldr	r3, [pc, #108]	; (8000360 <main+0x1a4>)
 80002f2:	9301      	str	r3, [sp, #4]
 80002f4:	2303      	movs	r3, #3
 80002f6:	9300      	str	r3, [sp, #0]
 80002f8:	2300      	movs	r3, #0
 80002fa:	2280      	movs	r2, #128	; 0x80
 80002fc:	4919      	ldr	r1, [pc, #100]	; (8000364 <main+0x1a8>)
 80002fe:	481a      	ldr	r0, [pc, #104]	; (8000368 <main+0x1ac>)
 8000300:	f000 fbe8 	bl	8000ad4 <xTaskCreate>
	vTaskSuspend(xWheelChair_StopHandle);
 8000304:	4b16      	ldr	r3, [pc, #88]	; (8000360 <main+0x1a4>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4618      	mov	r0, r3
 800030a:	f000 fd53 	bl	8000db4 <vTaskSuspend>


	xTaskCreate(vxWheelChair_WhichCommands_Handler ,"WheelChairStop",configMINIMAL_STACK_SIZE,NULL ,1 ,&xWheelChair_WhichCommands) ;
 800030e:	4b17      	ldr	r3, [pc, #92]	; (800036c <main+0x1b0>)
 8000310:	9301      	str	r3, [sp, #4]
 8000312:	2301      	movs	r3, #1
 8000314:	9300      	str	r3, [sp, #0]
 8000316:	2300      	movs	r3, #0
 8000318:	2280      	movs	r2, #128	; 0x80
 800031a:	4912      	ldr	r1, [pc, #72]	; (8000364 <main+0x1a8>)
 800031c:	4814      	ldr	r0, [pc, #80]	; (8000370 <main+0x1b4>)
 800031e:	f000 fbd9 	bl	8000ad4 <xTaskCreate>


	/*xTaskCreate(vWheelChair_Right_Handler ,"WheelChairRight" ,configMINIMAL_STACK_SIZE,NULL ,2,&xWheelChairRightHandle) ;
	xTaskCreate(xWheelChair_Left_Handler ,"WheelChairLeft" ,configMINIMAL_STACK_SIZE,NULL ,2,&xWheelChairLeftHandle) ;*/

	vTaskStartScheduler() ;
 8000322:	f000 fe6f 	bl	8001004 <vTaskStartScheduler>

	while(1)
 8000326:	e7fe      	b.n	8000326 <main+0x16a>
 8000328:	40021000 	.word	0x40021000
 800032c:	08000375 	.word	0x08000375
 8000330:	40004400 	.word	0x40004400
 8000334:	40010c00 	.word	0x40010c00
 8000338:	40011000 	.word	0x40011000
 800033c:	20000038 	.word	0x20000038
 8000340:	08002b10 	.word	0x08002b10
 8000344:	0800045d 	.word	0x0800045d
 8000348:	2000003c 	.word	0x2000003c
 800034c:	08002b1c 	.word	0x08002b1c
 8000350:	0800057d 	.word	0x0800057d
 8000354:	20000040 	.word	0x20000040
 8000358:	08002b30 	.word	0x08002b30
 800035c:	080006ed 	.word	0x080006ed
 8000360:	20000044 	.word	0x20000044
 8000364:	08002b44 	.word	0x08002b44
 8000368:	0800085d 	.word	0x0800085d
 800036c:	20000048 	.word	0x20000048
 8000370:	08000509 	.word	0x08000509

08000374 <Raspberry_CMDS_CallBack>:

}


void Raspberry_CMDS_CallBack(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0

	MCAL_UART_RECEIVE_DATA(USART2, &Raspberry_CMD, disable);
 8000378:	2201      	movs	r2, #1
 800037a:	491e      	ldr	r1, [pc, #120]	; (80003f4 <Raspberry_CMDS_CallBack+0x80>)
 800037c:	481e      	ldr	r0, [pc, #120]	; (80003f8 <Raspberry_CMDS_CallBack+0x84>)
 800037e:	f001 fe99 	bl	80020b4 <MCAL_UART_RECEIVE_DATA>
	MCAL_UART_SEND_DATA(USART2, &Raspberry_CMD, enable);
 8000382:	2200      	movs	r2, #0
 8000384:	491b      	ldr	r1, [pc, #108]	; (80003f4 <Raspberry_CMDS_CallBack+0x80>)
 8000386:	481c      	ldr	r0, [pc, #112]	; (80003f8 <Raspberry_CMDS_CallBack+0x84>)
 8000388:	f001 fe74 	bl	8002074 <MCAL_UART_SEND_DATA>

	//Direction
	if(Raspberry_CMD=='W' || Raspberry_CMD=='S' || Raspberry_CMD=='A' || Raspberry_CMD=='D' || Raspberry_CMD=='O')
 800038c:	4b19      	ldr	r3, [pc, #100]	; (80003f4 <Raspberry_CMDS_CallBack+0x80>)
 800038e:	881b      	ldrh	r3, [r3, #0]
 8000390:	b29b      	uxth	r3, r3
 8000392:	2b57      	cmp	r3, #87	; 0x57
 8000394:	d013      	beq.n	80003be <Raspberry_CMDS_CallBack+0x4a>
 8000396:	4b17      	ldr	r3, [pc, #92]	; (80003f4 <Raspberry_CMDS_CallBack+0x80>)
 8000398:	881b      	ldrh	r3, [r3, #0]
 800039a:	b29b      	uxth	r3, r3
 800039c:	2b53      	cmp	r3, #83	; 0x53
 800039e:	d00e      	beq.n	80003be <Raspberry_CMDS_CallBack+0x4a>
 80003a0:	4b14      	ldr	r3, [pc, #80]	; (80003f4 <Raspberry_CMDS_CallBack+0x80>)
 80003a2:	881b      	ldrh	r3, [r3, #0]
 80003a4:	b29b      	uxth	r3, r3
 80003a6:	2b41      	cmp	r3, #65	; 0x41
 80003a8:	d009      	beq.n	80003be <Raspberry_CMDS_CallBack+0x4a>
 80003aa:	4b12      	ldr	r3, [pc, #72]	; (80003f4 <Raspberry_CMDS_CallBack+0x80>)
 80003ac:	881b      	ldrh	r3, [r3, #0]
 80003ae:	b29b      	uxth	r3, r3
 80003b0:	2b44      	cmp	r3, #68	; 0x44
 80003b2:	d004      	beq.n	80003be <Raspberry_CMDS_CallBack+0x4a>
 80003b4:	4b0f      	ldr	r3, [pc, #60]	; (80003f4 <Raspberry_CMDS_CallBack+0x80>)
 80003b6:	881b      	ldrh	r3, [r3, #0]
 80003b8:	b29b      	uxth	r3, r3
 80003ba:	2b4f      	cmp	r3, #79	; 0x4f
 80003bc:	d106      	bne.n	80003cc <Raspberry_CMDS_CallBack+0x58>
	{
		UART_MESSAGE[0]=Raspberry_CMD;
 80003be:	4b0d      	ldr	r3, [pc, #52]	; (80003f4 <Raspberry_CMDS_CallBack+0x80>)
 80003c0:	881b      	ldrh	r3, [r3, #0]
 80003c2:	b29b      	uxth	r3, r3
 80003c4:	b2da      	uxtb	r2, r3
 80003c6:	4b0d      	ldr	r3, [pc, #52]	; (80003fc <Raspberry_CMDS_CallBack+0x88>)
 80003c8:	701a      	strb	r2, [r3, #0]
	else if((AsciiToInt(Raspberry_CMD))>=0 && (AsciiToInt(Raspberry_CMD))<10)
	{
		UART_MESSAGE[1]=Raspberry_CMD;
	}

}
 80003ca:	e011      	b.n	80003f0 <Raspberry_CMDS_CallBack+0x7c>
	else if((AsciiToInt(Raspberry_CMD))>=0 && (AsciiToInt(Raspberry_CMD))<10)
 80003cc:	4b09      	ldr	r3, [pc, #36]	; (80003f4 <Raspberry_CMDS_CallBack+0x80>)
 80003ce:	881b      	ldrh	r3, [r3, #0]
 80003d0:	b29b      	uxth	r3, r3
 80003d2:	3b30      	subs	r3, #48	; 0x30
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	db0b      	blt.n	80003f0 <Raspberry_CMDS_CallBack+0x7c>
 80003d8:	4b06      	ldr	r3, [pc, #24]	; (80003f4 <Raspberry_CMDS_CallBack+0x80>)
 80003da:	881b      	ldrh	r3, [r3, #0]
 80003dc:	b29b      	uxth	r3, r3
 80003de:	3b30      	subs	r3, #48	; 0x30
 80003e0:	2b09      	cmp	r3, #9
 80003e2:	dc05      	bgt.n	80003f0 <Raspberry_CMDS_CallBack+0x7c>
		UART_MESSAGE[1]=Raspberry_CMD;
 80003e4:	4b03      	ldr	r3, [pc, #12]	; (80003f4 <Raspberry_CMDS_CallBack+0x80>)
 80003e6:	881b      	ldrh	r3, [r3, #0]
 80003e8:	b29b      	uxth	r3, r3
 80003ea:	b2da      	uxtb	r2, r3
 80003ec:	4b03      	ldr	r3, [pc, #12]	; (80003fc <Raspberry_CMDS_CallBack+0x88>)
 80003ee:	705a      	strb	r2, [r3, #1]
}
 80003f0:	bf00      	nop
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	20000024 	.word	0x20000024
 80003f8:	40004400 	.word	0x40004400
 80003fc:	20004570 	.word	0x20004570

08000400 <Led_Alarm>:



void Led_Alarm(bool State)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	4603      	mov	r3, r0
 8000408:	71fb      	strb	r3, [r7, #7]
	if(State == true)
 800040a:	79fb      	ldrb	r3, [r7, #7]
 800040c:	2b00      	cmp	r3, #0
 800040e:	d012      	beq.n	8000436 <Led_Alarm+0x36>
	{
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_11,0);
 8000410:	2200      	movs	r2, #0
 8000412:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000416:	4810      	ldr	r0, [pc, #64]	; (8000458 <Led_Alarm+0x58>)
 8000418:	f002 f860 	bl	80024dc <MCAL_GPIO_WritePin>
		dms(5);
 800041c:	2005      	movs	r0, #5
 800041e:	f002 f913 	bl	8002648 <dms>
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 1);
 8000422:	2201      	movs	r2, #1
 8000424:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000428:	480b      	ldr	r0, [pc, #44]	; (8000458 <Led_Alarm+0x58>)
 800042a:	f002 f857 	bl	80024dc <MCAL_GPIO_WritePin>
		dms(5);
 800042e:	2005      	movs	r0, #5
 8000430:	f002 f90a 	bl	8002648 <dms>
	}
	else if(State==false)
	{
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 1);
	}
}
 8000434:	e00b      	b.n	800044e <Led_Alarm+0x4e>
	else if(State==false)
 8000436:	79fb      	ldrb	r3, [r7, #7]
 8000438:	f083 0301 	eor.w	r3, r3, #1
 800043c:	b2db      	uxtb	r3, r3
 800043e:	2b00      	cmp	r3, #0
 8000440:	d005      	beq.n	800044e <Led_Alarm+0x4e>
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 1);
 8000442:	2201      	movs	r2, #1
 8000444:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000448:	4803      	ldr	r0, [pc, #12]	; (8000458 <Led_Alarm+0x58>)
 800044a:	f002 f847 	bl	80024dc <MCAL_GPIO_WritePin>
}
 800044e:	bf00      	nop
 8000450:	3708      	adds	r7, #8
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	40010c00 	.word	0x40010c00

0800045c <vUltrasonic_Handler>:

/*======================System Tasks========================*/

void vUltrasonic_Handler(void* params)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
	while(1)
	{
		Ultrasonic_Trigger();
 8000464:	f002 fb02 	bl	8002a6c <Ultrasonic_Trigger>
		//g_FRONT_DISTANCE = Ultrasonic_Read();
		g_FRONT_DISTANCE =50;
 8000468:	4b21      	ldr	r3, [pc, #132]	; (80004f0 <vUltrasonic_Handler+0x94>)
 800046a:	2232      	movs	r2, #50	; 0x32
 800046c:	601a      	str	r2, [r3, #0]
		dms(10);
 800046e:	200a      	movs	r0, #10
 8000470:	f002 f8ea 	bl	8002648 <dms>

		if(g_FRONT_DISTANCE <40  && Prevus_DIR_INDEX==FORWARD)
 8000474:	4b1e      	ldr	r3, [pc, #120]	; (80004f0 <vUltrasonic_Handler+0x94>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	2b27      	cmp	r3, #39	; 0x27
 800047a:	dc2a      	bgt.n	80004d2 <vUltrasonic_Handler+0x76>
 800047c:	4b1d      	ldr	r3, [pc, #116]	; (80004f4 <vUltrasonic_Handler+0x98>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	2b57      	cmp	r3, #87	; 0x57
 8000482:	d126      	bne.n	80004d2 <vUltrasonic_Handler+0x76>
		{
			Buzzer_Alarm(true);
 8000484:	2001      	movs	r0, #1
 8000486:	f002 f9d3 	bl	8002830 <Buzzer_Alarm>
			Led_Alarm(true);
 800048a:	2001      	movs	r0, #1
 800048c:	f7ff ffb8 	bl	8000400 <Led_Alarm>
			for(g_CRNT_SPED_INDX=Prevus_Speed_INDEX; g_CRNT_SPED_INDX>=0;g_CRNT_SPED_INDX--)
 8000490:	4b19      	ldr	r3, [pc, #100]	; (80004f8 <vUltrasonic_Handler+0x9c>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4a19      	ldr	r2, [pc, #100]	; (80004fc <vUltrasonic_Handler+0xa0>)
 8000496:	6013      	str	r3, [r2, #0]
 8000498:	e013      	b.n	80004c2 <vUltrasonic_Handler+0x66>
			{
				WheelChair_Forward(SPEED_ARRAY[g_CRNT_SPED_INDX]);
 800049a:	4b18      	ldr	r3, [pc, #96]	; (80004fc <vUltrasonic_Handler+0xa0>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	4a18      	ldr	r2, [pc, #96]	; (8000500 <vUltrasonic_Handler+0xa4>)
 80004a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004a4:	4618      	mov	r0, r3
 80004a6:	f7ff fe63 	bl	8000170 <__aeabi_f2iz>
 80004aa:	4603      	mov	r3, r0
 80004ac:	4618      	mov	r0, r3
 80004ae:	f002 fa99 	bl	80029e4 <WheelChair_Forward>
				dms(DELLAY_STEP);
 80004b2:	2028      	movs	r0, #40	; 0x28
 80004b4:	f002 f8c8 	bl	8002648 <dms>
			for(g_CRNT_SPED_INDX=Prevus_Speed_INDEX; g_CRNT_SPED_INDX>=0;g_CRNT_SPED_INDX--)
 80004b8:	4b10      	ldr	r3, [pc, #64]	; (80004fc <vUltrasonic_Handler+0xa0>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	3b01      	subs	r3, #1
 80004be:	4a0f      	ldr	r2, [pc, #60]	; (80004fc <vUltrasonic_Handler+0xa0>)
 80004c0:	6013      	str	r3, [r2, #0]
 80004c2:	4b0e      	ldr	r3, [pc, #56]	; (80004fc <vUltrasonic_Handler+0xa0>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	dae7      	bge.n	800049a <vUltrasonic_Handler+0x3e>
			}
			Prevus_Speed_INDEX=0;
 80004ca:	4b0b      	ldr	r3, [pc, #44]	; (80004f8 <vUltrasonic_Handler+0x9c>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
 80004d0:	e00a      	b.n	80004e8 <vUltrasonic_Handler+0x8c>
		}
		else
		{
			Buzzer_Alarm(false);
 80004d2:	2000      	movs	r0, #0
 80004d4:	f002 f9ac 	bl	8002830 <Buzzer_Alarm>
			Led_Alarm(false);
 80004d8:	2000      	movs	r0, #0
 80004da:	f7ff ff91 	bl	8000400 <Led_Alarm>
			MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,0);
 80004de:	2200      	movs	r2, #0
 80004e0:	2101      	movs	r1, #1
 80004e2:	4808      	ldr	r0, [pc, #32]	; (8000504 <vUltrasonic_Handler+0xa8>)
 80004e4:	f001 fffa 	bl	80024dc <MCAL_GPIO_WritePin>
		}

		vTaskDelay(60);
 80004e8:	203c      	movs	r0, #60	; 0x3c
 80004ea:	f000 fc3f 	bl	8000d6c <vTaskDelay>
		Ultrasonic_Trigger();
 80004ee:	e7b9      	b.n	8000464 <vUltrasonic_Handler+0x8>
 80004f0:	20000028 	.word	0x20000028
 80004f4:	20000034 	.word	0x20000034
 80004f8:	20000030 	.word	0x20000030
 80004fc:	2000002c 	.word	0x2000002c
 8000500:	08002b5c 	.word	0x08002b5c
 8000504:	40010c00 	.word	0x40010c00

08000508 <vxWheelChair_WhichCommands_Handler>:
	}
}

void vxWheelChair_WhichCommands_Handler(void* params)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(UART_MESSAGE[0] == FORWARD && UART_MESSAGE[1]!=0)
 8000510:	4b16      	ldr	r3, [pc, #88]	; (800056c <vxWheelChair_WhichCommands_Handler+0x64>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	b2db      	uxtb	r3, r3
 8000516:	2b57      	cmp	r3, #87	; 0x57
 8000518:	d10a      	bne.n	8000530 <vxWheelChair_WhichCommands_Handler+0x28>
 800051a:	4b14      	ldr	r3, [pc, #80]	; (800056c <vxWheelChair_WhichCommands_Handler+0x64>)
 800051c:	785b      	ldrb	r3, [r3, #1]
 800051e:	b2db      	uxtb	r3, r3
 8000520:	2b00      	cmp	r3, #0
 8000522:	d005      	beq.n	8000530 <vxWheelChair_WhichCommands_Handler+0x28>
		{
			//should make vWheelChair_Forward_Handler active
			vTaskResume(xWheelChair_ForwardHandle);
 8000524:	4b12      	ldr	r3, [pc, #72]	; (8000570 <vxWheelChair_WhichCommands_Handler+0x68>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4618      	mov	r0, r3
 800052a:	f000 fcf3 	bl	8000f14 <vTaskResume>
 800052e:	e019      	b.n	8000564 <vxWheelChair_WhichCommands_Handler+0x5c>

		}
		else if(UART_MESSAGE[0] == BACKWARD && UART_MESSAGE[1]!=0)
 8000530:	4b0e      	ldr	r3, [pc, #56]	; (800056c <vxWheelChair_WhichCommands_Handler+0x64>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	b2db      	uxtb	r3, r3
 8000536:	2b53      	cmp	r3, #83	; 0x53
 8000538:	d10a      	bne.n	8000550 <vxWheelChair_WhichCommands_Handler+0x48>
 800053a:	4b0c      	ldr	r3, [pc, #48]	; (800056c <vxWheelChair_WhichCommands_Handler+0x64>)
 800053c:	785b      	ldrb	r3, [r3, #1]
 800053e:	b2db      	uxtb	r3, r3
 8000540:	2b00      	cmp	r3, #0
 8000542:	d005      	beq.n	8000550 <vxWheelChair_WhichCommands_Handler+0x48>
		{
			//should make vWheelChair_Backward_Handler active
			vTaskResume(xWheelChair_BackwardHandle);
 8000544:	4b0b      	ldr	r3, [pc, #44]	; (8000574 <vxWheelChair_WhichCommands_Handler+0x6c>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4618      	mov	r0, r3
 800054a:	f000 fce3 	bl	8000f14 <vTaskResume>
 800054e:	e009      	b.n	8000564 <vxWheelChair_WhichCommands_Handler+0x5c>

		}
		else if(UART_MESSAGE[0] == STOP)
 8000550:	4b06      	ldr	r3, [pc, #24]	; (800056c <vxWheelChair_WhichCommands_Handler+0x64>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	b2db      	uxtb	r3, r3
 8000556:	2b4f      	cmp	r3, #79	; 0x4f
 8000558:	d104      	bne.n	8000564 <vxWheelChair_WhichCommands_Handler+0x5c>
		{
			//should make vWheelChair_Stop_Handler active
			vTaskResume(xWheelChair_StopHandle);
 800055a:	4b07      	ldr	r3, [pc, #28]	; (8000578 <vxWheelChair_WhichCommands_Handler+0x70>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4618      	mov	r0, r3
 8000560:	f000 fcd8 	bl	8000f14 <vTaskResume>

		}
		vTaskDelay(20);
 8000564:	2014      	movs	r0, #20
 8000566:	f000 fc01 	bl	8000d6c <vTaskDelay>
		if(UART_MESSAGE[0] == FORWARD && UART_MESSAGE[1]!=0)
 800056a:	e7d1      	b.n	8000510 <vxWheelChair_WhichCommands_Handler+0x8>
 800056c:	20004570 	.word	0x20004570
 8000570:	2000003c 	.word	0x2000003c
 8000574:	20000040 	.word	0x20000040
 8000578:	20000044 	.word	0x20000044

0800057c <vWheelChair_Forward_Handler>:
	}
}


void vWheelChair_Forward_Handler(void* params)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(Prevus_DIR_INDEX == BACKWARD)
 8000584:	4b53      	ldr	r3, [pc, #332]	; (80006d4 <vWheelChair_Forward_Handler+0x158>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	2b53      	cmp	r3, #83	; 0x53
 800058a:	d11c      	bne.n	80005c6 <vWheelChair_Forward_Handler+0x4a>
		{
			//First Go To Stop State
			for(g_CRNT_SPED_INDX=Prevus_Speed_INDEX;g_CRNT_SPED_INDX>=0;g_CRNT_SPED_INDX--)
 800058c:	4b52      	ldr	r3, [pc, #328]	; (80006d8 <vWheelChair_Forward_Handler+0x15c>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a52      	ldr	r2, [pc, #328]	; (80006dc <vWheelChair_Forward_Handler+0x160>)
 8000592:	6013      	str	r3, [r2, #0]
 8000594:	e013      	b.n	80005be <vWheelChair_Forward_Handler+0x42>
			{
				WheelChair_Backward(SPEED_ARRAY[g_CRNT_SPED_INDX]);
 8000596:	4b51      	ldr	r3, [pc, #324]	; (80006dc <vWheelChair_Forward_Handler+0x160>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4a51      	ldr	r2, [pc, #324]	; (80006e0 <vWheelChair_Forward_Handler+0x164>)
 800059c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005a0:	4618      	mov	r0, r3
 80005a2:	f7ff fde5 	bl	8000170 <__aeabi_f2iz>
 80005a6:	4603      	mov	r3, r0
 80005a8:	4618      	mov	r0, r3
 80005aa:	f002 fa2d 	bl	8002a08 <WheelChair_Backward>
				dms(DELLAY_STEP);
 80005ae:	2028      	movs	r0, #40	; 0x28
 80005b0:	f002 f84a 	bl	8002648 <dms>
			for(g_CRNT_SPED_INDX=Prevus_Speed_INDEX;g_CRNT_SPED_INDX>=0;g_CRNT_SPED_INDX--)
 80005b4:	4b49      	ldr	r3, [pc, #292]	; (80006dc <vWheelChair_Forward_Handler+0x160>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	3b01      	subs	r3, #1
 80005ba:	4a48      	ldr	r2, [pc, #288]	; (80006dc <vWheelChair_Forward_Handler+0x160>)
 80005bc:	6013      	str	r3, [r2, #0]
 80005be:	4b47      	ldr	r3, [pc, #284]	; (80006dc <vWheelChair_Forward_Handler+0x160>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	dae7      	bge.n	8000596 <vWheelChair_Forward_Handler+0x1a>
			}
		}

		if(Prevus_Speed_INDEX==AsciiToInt(UART_MESSAGE[1]))
 80005c6:	4b47      	ldr	r3, [pc, #284]	; (80006e4 <vWheelChair_Forward_Handler+0x168>)
 80005c8:	785b      	ldrb	r3, [r3, #1]
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80005d0:	4b41      	ldr	r3, [pc, #260]	; (80006d8 <vWheelChair_Forward_Handler+0x15c>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d10e      	bne.n	80005f6 <vWheelChair_Forward_Handler+0x7a>
		{
			WheelChair_Forward(SPEED_ARRAY[AsciiToInt(UART_MESSAGE[1])]);
 80005d8:	4b42      	ldr	r3, [pc, #264]	; (80006e4 <vWheelChair_Forward_Handler+0x168>)
 80005da:	785b      	ldrb	r3, [r3, #1]
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	3b30      	subs	r3, #48	; 0x30
 80005e0:	4a3f      	ldr	r2, [pc, #252]	; (80006e0 <vWheelChair_Forward_Handler+0x164>)
 80005e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005e6:	4618      	mov	r0, r3
 80005e8:	f7ff fdc2 	bl	8000170 <__aeabi_f2iz>
 80005ec:	4603      	mov	r3, r0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f002 f9f8 	bl	80029e4 <WheelChair_Forward>
 80005f4:	e056      	b.n	80006a4 <vWheelChair_Forward_Handler+0x128>
		}
		else if(AsciiToInt(UART_MESSAGE[1])>Prevus_Speed_INDEX)
 80005f6:	4b3b      	ldr	r3, [pc, #236]	; (80006e4 <vWheelChair_Forward_Handler+0x168>)
 80005f8:	785b      	ldrb	r3, [r3, #1]
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000600:	4b35      	ldr	r3, [pc, #212]	; (80006d8 <vWheelChair_Forward_Handler+0x15c>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	429a      	cmp	r2, r3
 8000606:	dd22      	ble.n	800064e <vWheelChair_Forward_Handler+0xd2>
		{
			for(g_CRNT_SPED_INDX=Prevus_Speed_INDEX; g_CRNT_SPED_INDX< AsciiToInt(UART_MESSAGE[1]) ;g_CRNT_SPED_INDX++)
 8000608:	4b33      	ldr	r3, [pc, #204]	; (80006d8 <vWheelChair_Forward_Handler+0x15c>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a33      	ldr	r2, [pc, #204]	; (80006dc <vWheelChair_Forward_Handler+0x160>)
 800060e:	6013      	str	r3, [r2, #0]
 8000610:	e013      	b.n	800063a <vWheelChair_Forward_Handler+0xbe>
			{
				WheelChair_Forward(SPEED_ARRAY[g_CRNT_SPED_INDX]);
 8000612:	4b32      	ldr	r3, [pc, #200]	; (80006dc <vWheelChair_Forward_Handler+0x160>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4a32      	ldr	r2, [pc, #200]	; (80006e0 <vWheelChair_Forward_Handler+0x164>)
 8000618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800061c:	4618      	mov	r0, r3
 800061e:	f7ff fda7 	bl	8000170 <__aeabi_f2iz>
 8000622:	4603      	mov	r3, r0
 8000624:	4618      	mov	r0, r3
 8000626:	f002 f9dd 	bl	80029e4 <WheelChair_Forward>
				dms(DELLAY_STEP);
 800062a:	2028      	movs	r0, #40	; 0x28
 800062c:	f002 f80c 	bl	8002648 <dms>
			for(g_CRNT_SPED_INDX=Prevus_Speed_INDEX; g_CRNT_SPED_INDX< AsciiToInt(UART_MESSAGE[1]) ;g_CRNT_SPED_INDX++)
 8000630:	4b2a      	ldr	r3, [pc, #168]	; (80006dc <vWheelChair_Forward_Handler+0x160>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	3301      	adds	r3, #1
 8000636:	4a29      	ldr	r2, [pc, #164]	; (80006dc <vWheelChair_Forward_Handler+0x160>)
 8000638:	6013      	str	r3, [r2, #0]
 800063a:	4b2a      	ldr	r3, [pc, #168]	; (80006e4 <vWheelChair_Forward_Handler+0x168>)
 800063c:	785b      	ldrb	r3, [r3, #1]
 800063e:	b2db      	uxtb	r3, r3
 8000640:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000644:	4b25      	ldr	r3, [pc, #148]	; (80006dc <vWheelChair_Forward_Handler+0x160>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	429a      	cmp	r2, r3
 800064a:	dce2      	bgt.n	8000612 <vWheelChair_Forward_Handler+0x96>
 800064c:	e02a      	b.n	80006a4 <vWheelChair_Forward_Handler+0x128>
			}
		}
		else if(AsciiToInt(UART_MESSAGE[1])<Prevus_Speed_INDEX)
 800064e:	4b25      	ldr	r3, [pc, #148]	; (80006e4 <vWheelChair_Forward_Handler+0x168>)
 8000650:	785b      	ldrb	r3, [r3, #1]
 8000652:	b2db      	uxtb	r3, r3
 8000654:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000658:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <vWheelChair_Forward_Handler+0x15c>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	429a      	cmp	r2, r3
 800065e:	da21      	bge.n	80006a4 <vWheelChair_Forward_Handler+0x128>
		{
			for(g_CRNT_SPED_INDX=Prevus_Speed_INDEX; g_CRNT_SPED_INDX>AsciiToInt(UART_MESSAGE[1]) ;g_CRNT_SPED_INDX--)
 8000660:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <vWheelChair_Forward_Handler+0x15c>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a1d      	ldr	r2, [pc, #116]	; (80006dc <vWheelChair_Forward_Handler+0x160>)
 8000666:	6013      	str	r3, [r2, #0]
 8000668:	e013      	b.n	8000692 <vWheelChair_Forward_Handler+0x116>
			{
				WheelChair_Forward(SPEED_ARRAY[g_CRNT_SPED_INDX]);
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <vWheelChair_Forward_Handler+0x160>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4a1c      	ldr	r2, [pc, #112]	; (80006e0 <vWheelChair_Forward_Handler+0x164>)
 8000670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000674:	4618      	mov	r0, r3
 8000676:	f7ff fd7b 	bl	8000170 <__aeabi_f2iz>
 800067a:	4603      	mov	r3, r0
 800067c:	4618      	mov	r0, r3
 800067e:	f002 f9b1 	bl	80029e4 <WheelChair_Forward>
				dms(DELLAY_STEP);
 8000682:	2028      	movs	r0, #40	; 0x28
 8000684:	f001 ffe0 	bl	8002648 <dms>
			for(g_CRNT_SPED_INDX=Prevus_Speed_INDEX; g_CRNT_SPED_INDX>AsciiToInt(UART_MESSAGE[1]) ;g_CRNT_SPED_INDX--)
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <vWheelChair_Forward_Handler+0x160>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	3b01      	subs	r3, #1
 800068e:	4a13      	ldr	r2, [pc, #76]	; (80006dc <vWheelChair_Forward_Handler+0x160>)
 8000690:	6013      	str	r3, [r2, #0]
 8000692:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <vWheelChair_Forward_Handler+0x168>)
 8000694:	785b      	ldrb	r3, [r3, #1]
 8000696:	b2db      	uxtb	r3, r3
 8000698:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800069c:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <vWheelChair_Forward_Handler+0x160>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	429a      	cmp	r2, r3
 80006a2:	dbe2      	blt.n	800066a <vWheelChair_Forward_Handler+0xee>
			}
		}

		Prevus_Speed_INDEX = AsciiToInt(UART_MESSAGE[1]);
 80006a4:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <vWheelChair_Forward_Handler+0x168>)
 80006a6:	785b      	ldrb	r3, [r3, #1]
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	3b30      	subs	r3, #48	; 0x30
 80006ac:	4a0a      	ldr	r2, [pc, #40]	; (80006d8 <vWheelChair_Forward_Handler+0x15c>)
 80006ae:	6013      	str	r3, [r2, #0]
		Prevus_DIR_INDEX = UART_MESSAGE[0];
 80006b0:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <vWheelChair_Forward_Handler+0x168>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	461a      	mov	r2, r3
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <vWheelChair_Forward_Handler+0x158>)
 80006ba:	601a      	str	r2, [r3, #0]
		UART_MESSAGE[0]=0;
 80006bc:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <vWheelChair_Forward_Handler+0x168>)
 80006be:	2200      	movs	r2, #0
 80006c0:	701a      	strb	r2, [r3, #0]
		UART_MESSAGE[1]=0;
 80006c2:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <vWheelChair_Forward_Handler+0x168>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	705a      	strb	r2, [r3, #1]
		vTaskSuspend(xWheelChair_ForwardHandle);
 80006c8:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <vWheelChair_Forward_Handler+0x16c>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4618      	mov	r0, r3
 80006ce:	f000 fb71 	bl	8000db4 <vTaskSuspend>
		if(Prevus_DIR_INDEX == BACKWARD)
 80006d2:	e757      	b.n	8000584 <vWheelChair_Forward_Handler+0x8>
 80006d4:	20000034 	.word	0x20000034
 80006d8:	20000030 	.word	0x20000030
 80006dc:	2000002c 	.word	0x2000002c
 80006e0:	08002b5c 	.word	0x08002b5c
 80006e4:	20004570 	.word	0x20004570
 80006e8:	2000003c 	.word	0x2000003c

080006ec <vWheelChair_Backward_Handler>:




void vWheelChair_Backward_Handler(void* params)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(Prevus_DIR_INDEX == FORWARD)
 80006f4:	4b53      	ldr	r3, [pc, #332]	; (8000844 <vWheelChair_Backward_Handler+0x158>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2b57      	cmp	r3, #87	; 0x57
 80006fa:	d11c      	bne.n	8000736 <vWheelChair_Backward_Handler+0x4a>
		{
			//First Go To Stop State
			for(g_CRNT_SPED_INDX=Prevus_Speed_INDEX;g_CRNT_SPED_INDX>=0;g_CRNT_SPED_INDX--)
 80006fc:	4b52      	ldr	r3, [pc, #328]	; (8000848 <vWheelChair_Backward_Handler+0x15c>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a52      	ldr	r2, [pc, #328]	; (800084c <vWheelChair_Backward_Handler+0x160>)
 8000702:	6013      	str	r3, [r2, #0]
 8000704:	e013      	b.n	800072e <vWheelChair_Backward_Handler+0x42>
			{
				WheelChair_Forward(SPEED_ARRAY[g_CRNT_SPED_INDX]);
 8000706:	4b51      	ldr	r3, [pc, #324]	; (800084c <vWheelChair_Backward_Handler+0x160>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4a51      	ldr	r2, [pc, #324]	; (8000850 <vWheelChair_Backward_Handler+0x164>)
 800070c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff fd2d 	bl	8000170 <__aeabi_f2iz>
 8000716:	4603      	mov	r3, r0
 8000718:	4618      	mov	r0, r3
 800071a:	f002 f963 	bl	80029e4 <WheelChair_Forward>
				dms(DELLAY_STEP);
 800071e:	2028      	movs	r0, #40	; 0x28
 8000720:	f001 ff92 	bl	8002648 <dms>
			for(g_CRNT_SPED_INDX=Prevus_Speed_INDEX;g_CRNT_SPED_INDX>=0;g_CRNT_SPED_INDX--)
 8000724:	4b49      	ldr	r3, [pc, #292]	; (800084c <vWheelChair_Backward_Handler+0x160>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	3b01      	subs	r3, #1
 800072a:	4a48      	ldr	r2, [pc, #288]	; (800084c <vWheelChair_Backward_Handler+0x160>)
 800072c:	6013      	str	r3, [r2, #0]
 800072e:	4b47      	ldr	r3, [pc, #284]	; (800084c <vWheelChair_Backward_Handler+0x160>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	2b00      	cmp	r3, #0
 8000734:	dae7      	bge.n	8000706 <vWheelChair_Backward_Handler+0x1a>
			}
		}

		//Second Go To Backword State
		if(Prevus_Speed_INDEX==AsciiToInt(UART_MESSAGE[1]))
 8000736:	4b47      	ldr	r3, [pc, #284]	; (8000854 <vWheelChair_Backward_Handler+0x168>)
 8000738:	785b      	ldrb	r3, [r3, #1]
 800073a:	b2db      	uxtb	r3, r3
 800073c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000740:	4b41      	ldr	r3, [pc, #260]	; (8000848 <vWheelChair_Backward_Handler+0x15c>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	429a      	cmp	r2, r3
 8000746:	d10e      	bne.n	8000766 <vWheelChair_Backward_Handler+0x7a>
		{
			WheelChair_Backward(SPEED_ARRAY[AsciiToInt(UART_MESSAGE[1])]);
 8000748:	4b42      	ldr	r3, [pc, #264]	; (8000854 <vWheelChair_Backward_Handler+0x168>)
 800074a:	785b      	ldrb	r3, [r3, #1]
 800074c:	b2db      	uxtb	r3, r3
 800074e:	3b30      	subs	r3, #48	; 0x30
 8000750:	4a3f      	ldr	r2, [pc, #252]	; (8000850 <vWheelChair_Backward_Handler+0x164>)
 8000752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff fd0a 	bl	8000170 <__aeabi_f2iz>
 800075c:	4603      	mov	r3, r0
 800075e:	4618      	mov	r0, r3
 8000760:	f002 f952 	bl	8002a08 <WheelChair_Backward>
 8000764:	e056      	b.n	8000814 <vWheelChair_Backward_Handler+0x128>
		}
		else if(AsciiToInt(UART_MESSAGE[1])>Prevus_Speed_INDEX)
 8000766:	4b3b      	ldr	r3, [pc, #236]	; (8000854 <vWheelChair_Backward_Handler+0x168>)
 8000768:	785b      	ldrb	r3, [r3, #1]
 800076a:	b2db      	uxtb	r3, r3
 800076c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000770:	4b35      	ldr	r3, [pc, #212]	; (8000848 <vWheelChair_Backward_Handler+0x15c>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	429a      	cmp	r2, r3
 8000776:	dd22      	ble.n	80007be <vWheelChair_Backward_Handler+0xd2>
		{
			for(g_CRNT_SPED_INDX=Prevus_Speed_INDEX; g_CRNT_SPED_INDX< AsciiToInt(UART_MESSAGE[1]) ;g_CRNT_SPED_INDX++)
 8000778:	4b33      	ldr	r3, [pc, #204]	; (8000848 <vWheelChair_Backward_Handler+0x15c>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a33      	ldr	r2, [pc, #204]	; (800084c <vWheelChair_Backward_Handler+0x160>)
 800077e:	6013      	str	r3, [r2, #0]
 8000780:	e013      	b.n	80007aa <vWheelChair_Backward_Handler+0xbe>
			{
				WheelChair_Backward(SPEED_ARRAY[g_CRNT_SPED_INDX]);
 8000782:	4b32      	ldr	r3, [pc, #200]	; (800084c <vWheelChair_Backward_Handler+0x160>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a32      	ldr	r2, [pc, #200]	; (8000850 <vWheelChair_Backward_Handler+0x164>)
 8000788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff fcef 	bl	8000170 <__aeabi_f2iz>
 8000792:	4603      	mov	r3, r0
 8000794:	4618      	mov	r0, r3
 8000796:	f002 f937 	bl	8002a08 <WheelChair_Backward>
				dms(DELLAY_STEP);
 800079a:	2028      	movs	r0, #40	; 0x28
 800079c:	f001 ff54 	bl	8002648 <dms>
			for(g_CRNT_SPED_INDX=Prevus_Speed_INDEX; g_CRNT_SPED_INDX< AsciiToInt(UART_MESSAGE[1]) ;g_CRNT_SPED_INDX++)
 80007a0:	4b2a      	ldr	r3, [pc, #168]	; (800084c <vWheelChair_Backward_Handler+0x160>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	3301      	adds	r3, #1
 80007a6:	4a29      	ldr	r2, [pc, #164]	; (800084c <vWheelChair_Backward_Handler+0x160>)
 80007a8:	6013      	str	r3, [r2, #0]
 80007aa:	4b2a      	ldr	r3, [pc, #168]	; (8000854 <vWheelChair_Backward_Handler+0x168>)
 80007ac:	785b      	ldrb	r3, [r3, #1]
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80007b4:	4b25      	ldr	r3, [pc, #148]	; (800084c <vWheelChair_Backward_Handler+0x160>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	429a      	cmp	r2, r3
 80007ba:	dce2      	bgt.n	8000782 <vWheelChair_Backward_Handler+0x96>
 80007bc:	e02a      	b.n	8000814 <vWheelChair_Backward_Handler+0x128>
			}
		}
		else if(AsciiToInt(UART_MESSAGE[1])<Prevus_Speed_INDEX)
 80007be:	4b25      	ldr	r3, [pc, #148]	; (8000854 <vWheelChair_Backward_Handler+0x168>)
 80007c0:	785b      	ldrb	r3, [r3, #1]
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80007c8:	4b1f      	ldr	r3, [pc, #124]	; (8000848 <vWheelChair_Backward_Handler+0x15c>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	429a      	cmp	r2, r3
 80007ce:	da21      	bge.n	8000814 <vWheelChair_Backward_Handler+0x128>
		{
			for(g_CRNT_SPED_INDX=Prevus_Speed_INDEX; g_CRNT_SPED_INDX>AsciiToInt(UART_MESSAGE[1]) ;g_CRNT_SPED_INDX--)
 80007d0:	4b1d      	ldr	r3, [pc, #116]	; (8000848 <vWheelChair_Backward_Handler+0x15c>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a1d      	ldr	r2, [pc, #116]	; (800084c <vWheelChair_Backward_Handler+0x160>)
 80007d6:	6013      	str	r3, [r2, #0]
 80007d8:	e013      	b.n	8000802 <vWheelChair_Backward_Handler+0x116>
			{
				WheelChair_Backward(SPEED_ARRAY[g_CRNT_SPED_INDX]);
 80007da:	4b1c      	ldr	r3, [pc, #112]	; (800084c <vWheelChair_Backward_Handler+0x160>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4a1c      	ldr	r2, [pc, #112]	; (8000850 <vWheelChair_Backward_Handler+0x164>)
 80007e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007e4:	4618      	mov	r0, r3
 80007e6:	f7ff fcc3 	bl	8000170 <__aeabi_f2iz>
 80007ea:	4603      	mov	r3, r0
 80007ec:	4618      	mov	r0, r3
 80007ee:	f002 f90b 	bl	8002a08 <WheelChair_Backward>
				dms(DELLAY_STEP);
 80007f2:	2028      	movs	r0, #40	; 0x28
 80007f4:	f001 ff28 	bl	8002648 <dms>
			for(g_CRNT_SPED_INDX=Prevus_Speed_INDEX; g_CRNT_SPED_INDX>AsciiToInt(UART_MESSAGE[1]) ;g_CRNT_SPED_INDX--)
 80007f8:	4b14      	ldr	r3, [pc, #80]	; (800084c <vWheelChair_Backward_Handler+0x160>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	3b01      	subs	r3, #1
 80007fe:	4a13      	ldr	r2, [pc, #76]	; (800084c <vWheelChair_Backward_Handler+0x160>)
 8000800:	6013      	str	r3, [r2, #0]
 8000802:	4b14      	ldr	r3, [pc, #80]	; (8000854 <vWheelChair_Backward_Handler+0x168>)
 8000804:	785b      	ldrb	r3, [r3, #1]
 8000806:	b2db      	uxtb	r3, r3
 8000808:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800080c:	4b0f      	ldr	r3, [pc, #60]	; (800084c <vWheelChair_Backward_Handler+0x160>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	429a      	cmp	r2, r3
 8000812:	dbe2      	blt.n	80007da <vWheelChair_Backward_Handler+0xee>
			}
		}
		Prevus_Speed_INDEX = AsciiToInt(UART_MESSAGE[1]);
 8000814:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <vWheelChair_Backward_Handler+0x168>)
 8000816:	785b      	ldrb	r3, [r3, #1]
 8000818:	b2db      	uxtb	r3, r3
 800081a:	3b30      	subs	r3, #48	; 0x30
 800081c:	4a0a      	ldr	r2, [pc, #40]	; (8000848 <vWheelChair_Backward_Handler+0x15c>)
 800081e:	6013      	str	r3, [r2, #0]
		Prevus_DIR_INDEX = UART_MESSAGE[0];
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <vWheelChair_Backward_Handler+0x168>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	b2db      	uxtb	r3, r3
 8000826:	461a      	mov	r2, r3
 8000828:	4b06      	ldr	r3, [pc, #24]	; (8000844 <vWheelChair_Backward_Handler+0x158>)
 800082a:	601a      	str	r2, [r3, #0]
		UART_MESSAGE[0]=0;
 800082c:	4b09      	ldr	r3, [pc, #36]	; (8000854 <vWheelChair_Backward_Handler+0x168>)
 800082e:	2200      	movs	r2, #0
 8000830:	701a      	strb	r2, [r3, #0]
		UART_MESSAGE[1]=0;
 8000832:	4b08      	ldr	r3, [pc, #32]	; (8000854 <vWheelChair_Backward_Handler+0x168>)
 8000834:	2200      	movs	r2, #0
 8000836:	705a      	strb	r2, [r3, #1]
		vTaskSuspend(xWheelChair_BackwardHandle);
 8000838:	4b07      	ldr	r3, [pc, #28]	; (8000858 <vWheelChair_Backward_Handler+0x16c>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4618      	mov	r0, r3
 800083e:	f000 fab9 	bl	8000db4 <vTaskSuspend>
		if(Prevus_DIR_INDEX == FORWARD)
 8000842:	e757      	b.n	80006f4 <vWheelChair_Backward_Handler+0x8>
 8000844:	20000034 	.word	0x20000034
 8000848:	20000030 	.word	0x20000030
 800084c:	2000002c 	.word	0x2000002c
 8000850:	08002b5c 	.word	0x08002b5c
 8000854:	20004570 	.word	0x20004570
 8000858:	20000040 	.word	0x20000040

0800085c <vWheelChair_Stop_Handler>:
}



void vWheelChair_Stop_Handler(void* params)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(Prevus_DIR_INDEX==FORWARD)
 8000864:	4b29      	ldr	r3, [pc, #164]	; (800090c <vWheelChair_Stop_Handler+0xb0>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	2b57      	cmp	r3, #87	; 0x57
 800086a:	d11c      	bne.n	80008a6 <vWheelChair_Stop_Handler+0x4a>
		{
			for(g_CRNT_SPED_INDX=Prevus_Speed_INDEX; g_CRNT_SPED_INDX>=0;g_CRNT_SPED_INDX--)
 800086c:	4b28      	ldr	r3, [pc, #160]	; (8000910 <vWheelChair_Stop_Handler+0xb4>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a28      	ldr	r2, [pc, #160]	; (8000914 <vWheelChair_Stop_Handler+0xb8>)
 8000872:	6013      	str	r3, [r2, #0]
 8000874:	e013      	b.n	800089e <vWheelChair_Stop_Handler+0x42>
			{
				WheelChair_Forward(SPEED_ARRAY[g_CRNT_SPED_INDX]);
 8000876:	4b27      	ldr	r3, [pc, #156]	; (8000914 <vWheelChair_Stop_Handler+0xb8>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4a27      	ldr	r2, [pc, #156]	; (8000918 <vWheelChair_Stop_Handler+0xbc>)
 800087c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff fc75 	bl	8000170 <__aeabi_f2iz>
 8000886:	4603      	mov	r3, r0
 8000888:	4618      	mov	r0, r3
 800088a:	f002 f8ab 	bl	80029e4 <WheelChair_Forward>
				dms(DELLAY_STEP);
 800088e:	2028      	movs	r0, #40	; 0x28
 8000890:	f001 feda 	bl	8002648 <dms>
			for(g_CRNT_SPED_INDX=Prevus_Speed_INDEX; g_CRNT_SPED_INDX>=0;g_CRNT_SPED_INDX--)
 8000894:	4b1f      	ldr	r3, [pc, #124]	; (8000914 <vWheelChair_Stop_Handler+0xb8>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	3b01      	subs	r3, #1
 800089a:	4a1e      	ldr	r2, [pc, #120]	; (8000914 <vWheelChair_Stop_Handler+0xb8>)
 800089c:	6013      	str	r3, [r2, #0]
 800089e:	4b1d      	ldr	r3, [pc, #116]	; (8000914 <vWheelChair_Stop_Handler+0xb8>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	dae7      	bge.n	8000876 <vWheelChair_Stop_Handler+0x1a>
			}
		}
		if(Prevus_DIR_INDEX==BACKWARD)
 80008a6:	4b19      	ldr	r3, [pc, #100]	; (800090c <vWheelChair_Stop_Handler+0xb0>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	2b53      	cmp	r3, #83	; 0x53
 80008ac:	d11c      	bne.n	80008e8 <vWheelChair_Stop_Handler+0x8c>
		{
			for(g_CRNT_SPED_INDX=Prevus_Speed_INDEX; g_CRNT_SPED_INDX>=0;g_CRNT_SPED_INDX--)
 80008ae:	4b18      	ldr	r3, [pc, #96]	; (8000910 <vWheelChair_Stop_Handler+0xb4>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4a18      	ldr	r2, [pc, #96]	; (8000914 <vWheelChair_Stop_Handler+0xb8>)
 80008b4:	6013      	str	r3, [r2, #0]
 80008b6:	e013      	b.n	80008e0 <vWheelChair_Stop_Handler+0x84>
			{
				WheelChair_Backward(SPEED_ARRAY[g_CRNT_SPED_INDX]);
 80008b8:	4b16      	ldr	r3, [pc, #88]	; (8000914 <vWheelChair_Stop_Handler+0xb8>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a16      	ldr	r2, [pc, #88]	; (8000918 <vWheelChair_Stop_Handler+0xbc>)
 80008be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff fc54 	bl	8000170 <__aeabi_f2iz>
 80008c8:	4603      	mov	r3, r0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f002 f89c 	bl	8002a08 <WheelChair_Backward>
				dms(DELLAY_STEP);
 80008d0:	2028      	movs	r0, #40	; 0x28
 80008d2:	f001 feb9 	bl	8002648 <dms>
			for(g_CRNT_SPED_INDX=Prevus_Speed_INDEX; g_CRNT_SPED_INDX>=0;g_CRNT_SPED_INDX--)
 80008d6:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <vWheelChair_Stop_Handler+0xb8>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	3b01      	subs	r3, #1
 80008dc:	4a0d      	ldr	r2, [pc, #52]	; (8000914 <vWheelChair_Stop_Handler+0xb8>)
 80008de:	6013      	str	r3, [r2, #0]
 80008e0:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <vWheelChair_Stop_Handler+0xb8>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	dae7      	bge.n	80008b8 <vWheelChair_Stop_Handler+0x5c>
			}
		}

		Prevus_Speed_INDEX=0;
 80008e8:	4b09      	ldr	r3, [pc, #36]	; (8000910 <vWheelChair_Stop_Handler+0xb4>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
		Prevus_DIR_INDEX=STOP;
 80008ee:	4b07      	ldr	r3, [pc, #28]	; (800090c <vWheelChair_Stop_Handler+0xb0>)
 80008f0:	224f      	movs	r2, #79	; 0x4f
 80008f2:	601a      	str	r2, [r3, #0]
		UART_MESSAGE[0]=0;
 80008f4:	4b09      	ldr	r3, [pc, #36]	; (800091c <vWheelChair_Stop_Handler+0xc0>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	701a      	strb	r2, [r3, #0]
		UART_MESSAGE[1]=0;
 80008fa:	4b08      	ldr	r3, [pc, #32]	; (800091c <vWheelChair_Stop_Handler+0xc0>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	705a      	strb	r2, [r3, #1]
		vTaskSuspend(xWheelChair_StopHandle);
 8000900:	4b07      	ldr	r3, [pc, #28]	; (8000920 <vWheelChair_Stop_Handler+0xc4>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4618      	mov	r0, r3
 8000906:	f000 fa55 	bl	8000db4 <vTaskSuspend>
		if(Prevus_DIR_INDEX==FORWARD)
 800090a:	e7ab      	b.n	8000864 <vWheelChair_Stop_Handler+0x8>
 800090c:	20000034 	.word	0x20000034
 8000910:	20000030 	.word	0x20000030
 8000914:	2000002c 	.word	0x2000002c
 8000918:	08002b5c 	.word	0x08002b5c
 800091c:	20004570 	.word	0x20004570
 8000920:	20000044 	.word	0x20000044

08000924 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000924:	480d      	ldr	r0, [pc, #52]	; (800095c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000926:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000928:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800092c:	480c      	ldr	r0, [pc, #48]	; (8000960 <LoopForever+0x6>)
  ldr r1, =_edata
 800092e:	490d      	ldr	r1, [pc, #52]	; (8000964 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000930:	4a0d      	ldr	r2, [pc, #52]	; (8000968 <LoopForever+0xe>)
  movs r3, #0
 8000932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000934:	e002      	b.n	800093c <LoopCopyDataInit>

08000936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800093a:	3304      	adds	r3, #4

0800093c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800093c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800093e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000940:	d3f9      	bcc.n	8000936 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000942:	4a0a      	ldr	r2, [pc, #40]	; (800096c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000944:	4c0a      	ldr	r4, [pc, #40]	; (8000970 <LoopForever+0x16>)
  movs r3, #0
 8000946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000948:	e001      	b.n	800094e <LoopFillZerobss>

0800094a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800094a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800094c:	3204      	adds	r2, #4

0800094e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800094e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000950:	d3fb      	bcc.n	800094a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000952:	f002 f8a5 	bl	8002aa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000956:	f7ff fc31 	bl	80001bc <main>

0800095a <LoopForever>:

LoopForever:
    b LoopForever
 800095a:	e7fe      	b.n	800095a <LoopForever>
  ldr   r0, =_estack
 800095c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000960:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000964:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8000968:	08002bac 	.word	0x08002bac
  ldr r2, =_sbss
 800096c:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000970:	200045ec 	.word	0x200045ec

08000974 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000974:	e7fe      	b.n	8000974 <ADC1_2_IRQHandler>

08000976 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000976:	b480      	push	{r7}
 8000978:	b083      	sub	sp, #12
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	f103 0208 	add.w	r2, r3, #8
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	f04f 32ff 	mov.w	r2, #4294967295
 800098e:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	f103 0208 	add.w	r2, r3, #8
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	f103 0208 	add.w	r2, r3, #8
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80009aa:	bf00      	nop
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bc80      	pop	{r7}
 80009b2:	4770      	bx	lr

080009b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2200      	movs	r2, #0
 80009c0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80009c2:	bf00      	nop
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bc80      	pop	{r7}
 80009ca:	4770      	bx	lr

080009cc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80009cc:	b480      	push	{r7}
 80009ce:	b085      	sub	sp, #20
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	68fa      	ldr	r2, [r7, #12]
 80009e0:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	689a      	ldr	r2, [r3, #8]
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	689b      	ldr	r3, [r3, #8]
 80009ee:	683a      	ldr	r2, [r7, #0]
 80009f0:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	683a      	ldr	r2, [r7, #0]
 80009f6:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	687a      	ldr	r2, [r7, #4]
 80009fc:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	1c5a      	adds	r2, r3, #1
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	601a      	str	r2, [r3, #0]
}
 8000a08:	bf00      	nop
 8000a0a:	3714      	adds	r7, #20
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bc80      	pop	{r7}
 8000a10:	4770      	bx	lr

08000a12 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000a12:	b480      	push	{r7}
 8000a14:	b085      	sub	sp, #20
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]
 8000a1a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a28:	d103      	bne.n	8000a32 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	691b      	ldr	r3, [r3, #16]
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	e00c      	b.n	8000a4c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	3308      	adds	r3, #8
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	e002      	b.n	8000a40 <vListInsert+0x2e>
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	68ba      	ldr	r2, [r7, #8]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d2f6      	bcs.n	8000a3a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	685a      	ldr	r2, [r3, #4]
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	683a      	ldr	r2, [r7, #0]
 8000a5a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	68fa      	ldr	r2, [r7, #12]
 8000a60:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	683a      	ldr	r2, [r7, #0]
 8000a66:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	1c5a      	adds	r2, r3, #1
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	601a      	str	r2, [r3, #0]
}
 8000a78:	bf00      	nop
 8000a7a:	3714      	adds	r7, #20
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bc80      	pop	{r7}
 8000a80:	4770      	bx	lr

08000a82 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000a82:	b480      	push	{r7}
 8000a84:	b085      	sub	sp, #20
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	691b      	ldr	r3, [r3, #16]
 8000a8e:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	687a      	ldr	r2, [r7, #4]
 8000a96:	6892      	ldr	r2, [r2, #8]
 8000a98:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	689b      	ldr	r3, [r3, #8]
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	6852      	ldr	r2, [r2, #4]
 8000aa2:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	687a      	ldr	r2, [r7, #4]
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	d103      	bne.n	8000ab6 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	689a      	ldr	r2, [r3, #8]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2200      	movs	r2, #0
 8000aba:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	1e5a      	subs	r2, r3, #1
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	681b      	ldr	r3, [r3, #0]
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3714      	adds	r7, #20
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bc80      	pop	{r7}
 8000ad2:	4770      	bx	lr

08000ad4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08c      	sub	sp, #48	; 0x30
 8000ad8:	af04      	add	r7, sp, #16
 8000ada:	60f8      	str	r0, [r7, #12]
 8000adc:	60b9      	str	r1, [r7, #8]
 8000ade:	603b      	str	r3, [r7, #0]
 8000ae0:	4613      	mov	r3, r2
 8000ae2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000ae4:	88fb      	ldrh	r3, [r7, #6]
 8000ae6:	009b      	lsls	r3, r3, #2
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f000 ff57 	bl	800199c <pvPortMalloc>
 8000aee:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d00e      	beq.n	8000b14 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000af6:	204c      	movs	r0, #76	; 0x4c
 8000af8:	f000 ff50 	bl	800199c <pvPortMalloc>
 8000afc:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8000afe:	69fb      	ldr	r3, [r7, #28]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d003      	beq.n	8000b0c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8000b04:	69fb      	ldr	r3, [r7, #28]
 8000b06:	697a      	ldr	r2, [r7, #20]
 8000b08:	631a      	str	r2, [r3, #48]	; 0x30
 8000b0a:	e005      	b.n	8000b18 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 8000b0c:	6978      	ldr	r0, [r7, #20]
 8000b0e:	f000 fff3 	bl	8001af8 <vPortFree>
 8000b12:	e001      	b.n	8000b18 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000b18:	69fb      	ldr	r3, [r7, #28]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d013      	beq.n	8000b46 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000b1e:	88fa      	ldrh	r2, [r7, #6]
 8000b20:	2300      	movs	r3, #0
 8000b22:	9303      	str	r3, [sp, #12]
 8000b24:	69fb      	ldr	r3, [r7, #28]
 8000b26:	9302      	str	r3, [sp, #8]
 8000b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b2a:	9301      	str	r3, [sp, #4]
 8000b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b2e:	9300      	str	r3, [sp, #0]
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	68b9      	ldr	r1, [r7, #8]
 8000b34:	68f8      	ldr	r0, [r7, #12]
 8000b36:	f000 f80e 	bl	8000b56 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000b3a:	69f8      	ldr	r0, [r7, #28]
 8000b3c:	f000 f884 	bl	8000c48 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000b40:	2301      	movs	r3, #1
 8000b42:	61bb      	str	r3, [r7, #24]
 8000b44:	e002      	b.n	8000b4c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000b46:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000b4c:	69bb      	ldr	r3, [r7, #24]
    }
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3720      	adds	r7, #32
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b086      	sub	sp, #24
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	60f8      	str	r0, [r7, #12]
 8000b5e:	60b9      	str	r1, [r7, #8]
 8000b60:	607a      	str	r2, [r7, #4]
 8000b62:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000b6e:	3b01      	subs	r3, #1
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	4413      	add	r3, r2
 8000b74:	613b      	str	r3, [r7, #16]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000b76:	693b      	ldr	r3, [r7, #16]
 8000b78:	f023 0307 	bic.w	r3, r3, #7
 8000b7c:	613b      	str	r3, [r7, #16]
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d01f      	beq.n	8000bc4 <prvInitialiseNewTask+0x6e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]
 8000b88:	e012      	b.n	8000bb0 <prvInitialiseNewTask+0x5a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000b8a:	68ba      	ldr	r2, [r7, #8]
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	4413      	add	r3, r2
 8000b90:	7819      	ldrb	r1, [r3, #0]
 8000b92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	4413      	add	r3, r2
 8000b98:	3334      	adds	r3, #52	; 0x34
 8000b9a:	460a      	mov	r2, r1
 8000b9c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000b9e:	68ba      	ldr	r2, [r7, #8]
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d006      	beq.n	8000bb8 <prvInitialiseNewTask+0x62>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	3301      	adds	r3, #1
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	2b0f      	cmp	r3, #15
 8000bb4:	d9e9      	bls.n	8000b8a <prvInitialiseNewTask+0x34>
 8000bb6:	e000      	b.n	8000bba <prvInitialiseNewTask+0x64>
            {
                break;
 8000bb8:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8000bc2:	e003      	b.n	8000bcc <prvInitialiseNewTask+0x76>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8000bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000bcc:	6a3b      	ldr	r3, [r7, #32]
 8000bce:	2b04      	cmp	r3, #4
 8000bd0:	d901      	bls.n	8000bd6 <prvInitialiseNewTask+0x80>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000bd2:	2304      	movs	r3, #4
 8000bd4:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bd8:	6a3a      	ldr	r2, [r7, #32]
 8000bda:	62da      	str	r2, [r3, #44]	; 0x2c
            pxNewTCB->uxBasePriority = uxPriority;
            pxNewTCB->uxMutexesHeld = 0;
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bde:	3304      	adds	r3, #4
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff fee7 	bl	80009b4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000be8:	3318      	adds	r3, #24
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff fee2 	bl	80009b4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000bf4:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000bf6:	6a3b      	ldr	r3, [r7, #32]
 8000bf8:	f1c3 0205 	rsb	r2, r3, #5
 8000bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bfe:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c04:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8000c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c08:	3344      	adds	r3, #68	; 0x44
 8000c0a:	2204      	movs	r2, #4
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f001 ff6a 	bl	8002ae8 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8000c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c16:	3348      	adds	r3, #72	; 0x48
 8000c18:	2201      	movs	r2, #1
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f001 ff63 	bl	8002ae8 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000c22:	683a      	ldr	r2, [r7, #0]
 8000c24:	68f9      	ldr	r1, [r7, #12]
 8000c26:	6938      	ldr	r0, [r7, #16]
 8000c28:	f000 fd9a 	bl	8001760 <pxPortInitialiseStack>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c30:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8000c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d002      	beq.n	8000c3e <prvInitialiseNewTask+0xe8>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c3c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000c3e:	bf00      	nop
 8000c40:	3718      	adds	r7, #24
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
	...

08000c48 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000c50:	f000 fe14 	bl	800187c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000c54:	4b3e      	ldr	r3, [pc, #248]	; (8000d50 <prvAddNewTaskToReadyList+0x108>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	4a3d      	ldr	r2, [pc, #244]	; (8000d50 <prvAddNewTaskToReadyList+0x108>)
 8000c5c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000c5e:	4b3d      	ldr	r3, [pc, #244]	; (8000d54 <prvAddNewTaskToReadyList+0x10c>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d109      	bne.n	8000c7a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8000c66:	4a3b      	ldr	r2, [pc, #236]	; (8000d54 <prvAddNewTaskToReadyList+0x10c>)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000c6c:	4b38      	ldr	r3, [pc, #224]	; (8000d50 <prvAddNewTaskToReadyList+0x108>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d110      	bne.n	8000c96 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8000c74:	f000 fc5e 	bl	8001534 <prvInitialiseTaskLists>
 8000c78:	e00d      	b.n	8000c96 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8000c7a:	4b37      	ldr	r3, [pc, #220]	; (8000d58 <prvAddNewTaskToReadyList+0x110>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d109      	bne.n	8000c96 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000c82:	4b34      	ldr	r3, [pc, #208]	; (8000d54 <prvAddNewTaskToReadyList+0x10c>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d802      	bhi.n	8000c96 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000c90:	4a30      	ldr	r2, [pc, #192]	; (8000d54 <prvAddNewTaskToReadyList+0x10c>)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8000c96:	4b31      	ldr	r3, [pc, #196]	; (8000d5c <prvAddNewTaskToReadyList+0x114>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	4a2f      	ldr	r2, [pc, #188]	; (8000d5c <prvAddNewTaskToReadyList+0x114>)
 8000c9e:	6013      	str	r3, [r2, #0]
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	409a      	lsls	r2, r3
 8000ca8:	4b2d      	ldr	r3, [pc, #180]	; (8000d60 <prvAddNewTaskToReadyList+0x118>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	4a2c      	ldr	r2, [pc, #176]	; (8000d60 <prvAddNewTaskToReadyList+0x118>)
 8000cb0:	6013      	str	r3, [r2, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cb6:	492b      	ldr	r1, [pc, #172]	; (8000d64 <prvAddNewTaskToReadyList+0x11c>)
 8000cb8:	4613      	mov	r3, r2
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	4413      	add	r3, r2
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	440b      	add	r3, r1
 8000cc2:	3304      	adds	r3, #4
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	68fa      	ldr	r2, [r7, #12]
 8000ccc:	609a      	str	r2, [r3, #8]
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	689a      	ldr	r2, [r3, #8]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	689b      	ldr	r3, [r3, #8]
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	3204      	adds	r2, #4
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	1d1a      	adds	r2, r3, #4
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cec:	4613      	mov	r3, r2
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	4413      	add	r3, r2
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	4a1b      	ldr	r2, [pc, #108]	; (8000d64 <prvAddNewTaskToReadyList+0x11c>)
 8000cf6:	441a      	add	r2, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	615a      	str	r2, [r3, #20]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d00:	4918      	ldr	r1, [pc, #96]	; (8000d64 <prvAddNewTaskToReadyList+0x11c>)
 8000d02:	4613      	mov	r3, r2
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	4413      	add	r3, r2
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	440b      	add	r3, r1
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	1c59      	adds	r1, r3, #1
 8000d10:	4814      	ldr	r0, [pc, #80]	; (8000d64 <prvAddNewTaskToReadyList+0x11c>)
 8000d12:	4613      	mov	r3, r2
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	4413      	add	r3, r2
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	4403      	add	r3, r0
 8000d1c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8000d1e:	f000 fdc5 	bl	80018ac <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8000d22:	4b0d      	ldr	r3, [pc, #52]	; (8000d58 <prvAddNewTaskToReadyList+0x110>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d00e      	beq.n	8000d48 <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000d2a:	4b0a      	ldr	r3, [pc, #40]	; (8000d54 <prvAddNewTaskToReadyList+0x10c>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d207      	bcs.n	8000d48 <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8000d38:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <prvAddNewTaskToReadyList+0x120>)
 8000d3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	f3bf 8f4f 	dsb	sy
 8000d44:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000d48:	bf00      	nop
 8000d4a:	3710      	adds	r7, #16
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20000124 	.word	0x20000124
 8000d54:	2000004c 	.word	0x2000004c
 8000d58:	20000130 	.word	0x20000130
 8000d5c:	20000140 	.word	0x20000140
 8000d60:	2000012c 	.word	0x2000012c
 8000d64:	20000050 	.word	0x20000050
 8000d68:	e000ed04 	.word	0xe000ed04

08000d6c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8000d74:	2300      	movs	r3, #0
 8000d76:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d008      	beq.n	8000d90 <vTaskDelay+0x24>
        {
            configASSERT( uxSchedulerSuspended == 0 );
            vTaskSuspendAll();
 8000d7e:	f000 f97b 	bl	8001078 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8000d82:	2100      	movs	r1, #0
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f000 fc6b 	bl	8001660 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8000d8a:	f000 f983 	bl	8001094 <xTaskResumeAll>
 8000d8e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d107      	bne.n	8000da6 <vTaskDelay+0x3a>
        {
            portYIELD_WITHIN_API();
 8000d96:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <vTaskDelay+0x44>)
 8000d98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	f3bf 8f4f 	dsb	sy
 8000da2:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8000da6:	bf00      	nop
 8000da8:	3710      	adds	r7, #16
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	e000ed04 	.word	0xe000ed04

08000db4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8000dbc:	f000 fd5e 	bl	800187c <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d102      	bne.n	8000dcc <vTaskSuspend+0x18>
 8000dc6:	4b3b      	ldr	r3, [pc, #236]	; (8000eb4 <vTaskSuspend+0x100>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	e000      	b.n	8000dce <vTaskSuspend+0x1a>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	60bb      	str	r3, [r7, #8]

            traceTASK_SUSPEND( pxTCB );

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	3304      	adds	r3, #4
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fe54 	bl	8000a82 <uxListRemove>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d115      	bne.n	8000e0c <vTaskSuspend+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000de4:	4934      	ldr	r1, [pc, #208]	; (8000eb8 <vTaskSuspend+0x104>)
 8000de6:	4613      	mov	r3, r2
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	4413      	add	r3, r2
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	440b      	add	r3, r1
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d10a      	bne.n	8000e0c <vTaskSuspend+0x58>
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	43da      	mvns	r2, r3
 8000e02:	4b2e      	ldr	r3, [pc, #184]	; (8000ebc <vTaskSuspend+0x108>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4013      	ands	r3, r2
 8000e08:	4a2c      	ldr	r2, [pc, #176]	; (8000ebc <vTaskSuspend+0x108>)
 8000e0a:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d004      	beq.n	8000e1e <vTaskSuspend+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	3318      	adds	r3, #24
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff fe32 	bl	8000a82 <uxListRemove>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	3304      	adds	r3, #4
 8000e22:	4619      	mov	r1, r3
 8000e24:	4826      	ldr	r0, [pc, #152]	; (8000ec0 <vTaskSuspend+0x10c>)
 8000e26:	f7ff fdd1 	bl	80009cc <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
                {
                    BaseType_t x;

                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	e010      	b.n	8000e52 <vTaskSuspend+0x9e>
                    {
                        if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8000e30:	68ba      	ldr	r2, [r7, #8]
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	4413      	add	r3, r2
 8000e36:	3348      	adds	r3, #72	; 0x48
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d105      	bne.n	8000e4c <vTaskSuspend+0x98>
                        {
                            /* The task was blocked to wait for a notification, but is
                             * now suspended, so no notification was received. */
                            pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 8000e40:	68ba      	ldr	r2, [r7, #8]
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	4413      	add	r3, r2
 8000e46:	3348      	adds	r3, #72	; 0x48
 8000e48:	2200      	movs	r2, #0
 8000e4a:	701a      	strb	r2, [r3, #0]
                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	ddeb      	ble.n	8000e30 <vTaskSuspend+0x7c>
                        }
                    }
                }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
 8000e58:	f000 fd28 	bl	80018ac <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8000e5c:	4b19      	ldr	r3, [pc, #100]	; (8000ec4 <vTaskSuspend+0x110>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d005      	beq.n	8000e70 <vTaskSuspend+0xbc>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
 8000e64:	f000 fd0a 	bl	800187c <vPortEnterCritical>
            {
                prvResetNextTaskUnblockTime();
 8000e68:	f000 fbe0 	bl	800162c <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
 8000e6c:	f000 fd1e 	bl	80018ac <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
 8000e70:	4b10      	ldr	r3, [pc, #64]	; (8000eb4 <vTaskSuspend+0x100>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	68ba      	ldr	r2, [r7, #8]
 8000e76:	429a      	cmp	r2, r3
 8000e78:	d118      	bne.n	8000eac <vTaskSuspend+0xf8>
        {
            if( xSchedulerRunning != pdFALSE )
 8000e7a:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <vTaskSuspend+0x110>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d008      	beq.n	8000e94 <vTaskSuspend+0xe0>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
                portYIELD_WITHIN_API();
 8000e82:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <vTaskSuspend+0x114>)
 8000e84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	f3bf 8f4f 	dsb	sy
 8000e8e:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8000e92:	e00b      	b.n	8000eac <vTaskSuspend+0xf8>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8000e94:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <vTaskSuspend+0x10c>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <vTaskSuspend+0x118>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d103      	bne.n	8000ea8 <vTaskSuspend+0xf4>
                    pxCurrentTCB = NULL;
 8000ea0:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <vTaskSuspend+0x100>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
    }
 8000ea6:	e001      	b.n	8000eac <vTaskSuspend+0xf8>
                    vTaskSwitchContext();
 8000ea8:	f000 fae6 	bl	8001478 <vTaskSwitchContext>
    }
 8000eac:	bf00      	nop
 8000eae:	3710      	adds	r7, #16
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	2000004c 	.word	0x2000004c
 8000eb8:	20000050 	.word	0x20000050
 8000ebc:	2000012c 	.word	0x2000012c
 8000ec0:	20000110 	.word	0x20000110
 8000ec4:	20000130 	.word	0x20000130
 8000ec8:	e000ed04 	.word	0xe000ed04
 8000ecc:	20000124 	.word	0x20000124

08000ed0 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 8000ed0:	b480      	push	{r7}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	60fb      	str	r3, [r7, #12]
        const TCB_t * const pxTCB = xTask;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	60bb      	str	r3, [r7, #8]

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	695b      	ldr	r3, [r3, #20]
 8000ee4:	4a09      	ldr	r2, [pc, #36]	; (8000f0c <prvTaskIsTaskSuspended+0x3c>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d10a      	bne.n	8000f00 <prvTaskIsTaskSuspended+0x30>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eee:	4a08      	ldr	r2, [pc, #32]	; (8000f10 <prvTaskIsTaskSuspended+0x40>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d005      	beq.n	8000f00 <prvTaskIsTaskSuspended+0x30>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because is is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d101      	bne.n	8000f00 <prvTaskIsTaskSuspended+0x30>
                {
                    xReturn = pdTRUE;
 8000efc:	2301      	movs	r3, #1
 8000efe:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8000f00:	68fb      	ldr	r3, [r7, #12]
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8000f02:	4618      	mov	r0, r3
 8000f04:	3714      	adds	r7, #20
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc80      	pop	{r7}
 8000f0a:	4770      	bx	lr
 8000f0c:	20000110 	.word	0x20000110
 8000f10:	200000e4 	.word	0x200000e4

08000f14 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskResume( TaskHandle_t xTaskToResume )
    {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = xTaskToResume;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	60fb      	str	r3, [r7, #12]
        /* It does not make sense to resume the calling task. */
        configASSERT( xTaskToResume );

        /* The parameter cannot be NULL as it is impossible to resume the
         * currently executing task. */
        if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8000f20:	4b34      	ldr	r3, [pc, #208]	; (8000ff4 <vTaskResume+0xe0>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	68fa      	ldr	r2, [r7, #12]
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d05f      	beq.n	8000fea <vTaskResume+0xd6>
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d05c      	beq.n	8000fea <vTaskResume+0xd6>
        {
            taskENTER_CRITICAL();
 8000f30:	f000 fca4 	bl	800187c <vPortEnterCritical>
            {
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8000f34:	68f8      	ldr	r0, [r7, #12]
 8000f36:	f7ff ffcb 	bl	8000ed0 <prvTaskIsTaskSuspended>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d052      	beq.n	8000fe6 <vTaskResume+0xd2>
                {
                    traceTASK_RESUME( pxTCB );

                    /* The ready list can be accessed even if the scheduler is
                     * suspended because this is inside a critical section. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	3304      	adds	r3, #4
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff fd9c 	bl	8000a82 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f4e:	2201      	movs	r2, #1
 8000f50:	409a      	lsls	r2, r3
 8000f52:	4b29      	ldr	r3, [pc, #164]	; (8000ff8 <vTaskResume+0xe4>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	4a27      	ldr	r2, [pc, #156]	; (8000ff8 <vTaskResume+0xe4>)
 8000f5a:	6013      	str	r3, [r2, #0]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f60:	4926      	ldr	r1, [pc, #152]	; (8000ffc <vTaskResume+0xe8>)
 8000f62:	4613      	mov	r3, r2
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	4413      	add	r3, r2
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	440b      	add	r3, r1
 8000f6c:	3304      	adds	r3, #4
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	60bb      	str	r3, [r7, #8]
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	68ba      	ldr	r2, [r7, #8]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	689a      	ldr	r2, [r3, #8]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	60da      	str	r2, [r3, #12]
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	68fa      	ldr	r2, [r7, #12]
 8000f86:	3204      	adds	r2, #4
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	1d1a      	adds	r2, r3, #4
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	609a      	str	r2, [r3, #8]
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f96:	4613      	mov	r3, r2
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	4413      	add	r3, r2
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	4a17      	ldr	r2, [pc, #92]	; (8000ffc <vTaskResume+0xe8>)
 8000fa0:	441a      	add	r2, r3
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	615a      	str	r2, [r3, #20]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000faa:	4914      	ldr	r1, [pc, #80]	; (8000ffc <vTaskResume+0xe8>)
 8000fac:	4613      	mov	r3, r2
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	4413      	add	r3, r2
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	440b      	add	r3, r1
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	1c59      	adds	r1, r3, #1
 8000fba:	4810      	ldr	r0, [pc, #64]	; (8000ffc <vTaskResume+0xe8>)
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	4413      	add	r3, r2
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	4403      	add	r3, r0
 8000fc6:	6019      	str	r1, [r3, #0]

                    /* A higher priority task may have just been resumed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fcc:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <vTaskResume+0xe0>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	d307      	bcc.n	8000fe6 <vTaskResume+0xd2>
                    {
                        /* This yield may not cause the task just resumed to run,
                         * but will leave the lists in the correct state for the
                         * next yield. */
                        taskYIELD_IF_USING_PREEMPTION();
 8000fd6:	4b0a      	ldr	r3, [pc, #40]	; (8001000 <vTaskResume+0xec>)
 8000fd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	f3bf 8f4f 	dsb	sy
 8000fe2:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8000fe6:	f000 fc61 	bl	80018ac <vPortExitCritical>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8000fea:	bf00      	nop
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	2000004c 	.word	0x2000004c
 8000ff8:	2000012c 	.word	0x2000012c
 8000ffc:	20000050 	.word	0x20000050
 8001000:	e000ed04 	.word	0xe000ed04

08001004 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800100a:	4b14      	ldr	r3, [pc, #80]	; (800105c <vTaskStartScheduler+0x58>)
 800100c:	9301      	str	r3, [sp, #4]
 800100e:	2300      	movs	r3, #0
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	2300      	movs	r3, #0
 8001014:	2280      	movs	r2, #128	; 0x80
 8001016:	4912      	ldr	r1, [pc, #72]	; (8001060 <vTaskStartScheduler+0x5c>)
 8001018:	4812      	ldr	r0, [pc, #72]	; (8001064 <vTaskStartScheduler+0x60>)
 800101a:	f7ff fd5b 	bl	8000ad4 <xTaskCreate>
 800101e:	6078      	str	r0, [r7, #4]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d114      	bne.n	8001050 <vTaskStartScheduler+0x4c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001026:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 800102a:	f383 8811 	msr	BASEPRI, r3
 800102e:	f3bf 8f6f 	isb	sy
 8001032:	f3bf 8f4f 	dsb	sy
 8001036:	603b      	str	r3, [r7, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8001038:	4b0b      	ldr	r3, [pc, #44]	; (8001068 <vTaskStartScheduler+0x64>)
 800103a:	f04f 32ff 	mov.w	r2, #4294967295
 800103e:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001040:	4b0a      	ldr	r3, [pc, #40]	; (800106c <vTaskStartScheduler+0x68>)
 8001042:	2201      	movs	r2, #1
 8001044:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001046:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <vTaskStartScheduler+0x6c>)
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800104c:	f000 fbf6 	bl	800183c <xPortStartScheduler>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001050:	4b08      	ldr	r3, [pc, #32]	; (8001074 <vTaskStartScheduler+0x70>)
 8001052:	681b      	ldr	r3, [r3, #0]
}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000148 	.word	0x20000148
 8001060:	08002b54 	.word	0x08002b54
 8001064:	08001505 	.word	0x08001505
 8001068:	20000144 	.word	0x20000144
 800106c:	20000130 	.word	0x20000130
 8001070:	20000128 	.word	0x20000128
 8001074:	20000000 	.word	0x20000000

08001078 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800107c:	4b04      	ldr	r3, [pc, #16]	; (8001090 <vTaskSuspendAll+0x18>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	3301      	adds	r3, #1
 8001082:	4a03      	ldr	r2, [pc, #12]	; (8001090 <vTaskSuspendAll+0x18>)
 8001084:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001086:	bf00      	nop
 8001088:	46bd      	mov	sp, r7
 800108a:	bc80      	pop	{r7}
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	2000014c 	.word	0x2000014c

08001094 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 800109e:	2300      	movs	r3, #0
 80010a0:	613b      	str	r3, [r7, #16]
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80010a2:	f000 fbeb 	bl	800187c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80010a6:	4b68      	ldr	r3, [pc, #416]	; (8001248 <xTaskResumeAll+0x1b4>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	3b01      	subs	r3, #1
 80010ac:	4a66      	ldr	r2, [pc, #408]	; (8001248 <xTaskResumeAll+0x1b4>)
 80010ae:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80010b0:	4b65      	ldr	r3, [pc, #404]	; (8001248 <xTaskResumeAll+0x1b4>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	f040 80c0 	bne.w	800123a <xTaskResumeAll+0x1a6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80010ba:	4b64      	ldr	r3, [pc, #400]	; (800124c <xTaskResumeAll+0x1b8>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	f000 80bb 	beq.w	800123a <xTaskResumeAll+0x1a6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80010c4:	e08a      	b.n	80011dc <xTaskResumeAll+0x148>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80010c6:	4b62      	ldr	r3, [pc, #392]	; (8001250 <xTaskResumeAll+0x1bc>)
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010d2:	60bb      	str	r3, [r7, #8]
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	69db      	ldr	r3, [r3, #28]
 80010d8:	697a      	ldr	r2, [r7, #20]
 80010da:	6a12      	ldr	r2, [r2, #32]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	6a1b      	ldr	r3, [r3, #32]
 80010e2:	697a      	ldr	r2, [r7, #20]
 80010e4:	69d2      	ldr	r2, [r2, #28]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	685a      	ldr	r2, [r3, #4]
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	3318      	adds	r3, #24
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d103      	bne.n	80010fc <xTaskResumeAll+0x68>
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	6a1a      	ldr	r2, [r3, #32]
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	2200      	movs	r2, #0
 8001100:	629a      	str	r2, [r3, #40]	; 0x28
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	1e5a      	subs	r2, r3, #1
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	695b      	ldr	r3, [r3, #20]
 8001110:	607b      	str	r3, [r7, #4]
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	697a      	ldr	r2, [r7, #20]
 8001118:	68d2      	ldr	r2, [r2, #12]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	697a      	ldr	r2, [r7, #20]
 8001122:	6892      	ldr	r2, [r2, #8]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685a      	ldr	r2, [r3, #4]
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	3304      	adds	r3, #4
 800112e:	429a      	cmp	r2, r3
 8001130:	d103      	bne.n	800113a <xTaskResumeAll+0xa6>
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	68da      	ldr	r2, [r3, #12]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	2200      	movs	r2, #0
 800113e:	615a      	str	r2, [r3, #20]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	1e5a      	subs	r2, r3, #1
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800114e:	2201      	movs	r2, #1
 8001150:	409a      	lsls	r2, r3
 8001152:	4b40      	ldr	r3, [pc, #256]	; (8001254 <xTaskResumeAll+0x1c0>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4313      	orrs	r3, r2
 8001158:	4a3e      	ldr	r2, [pc, #248]	; (8001254 <xTaskResumeAll+0x1c0>)
 800115a:	6013      	str	r3, [r2, #0]
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001160:	493d      	ldr	r1, [pc, #244]	; (8001258 <xTaskResumeAll+0x1c4>)
 8001162:	4613      	mov	r3, r2
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	4413      	add	r3, r2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	440b      	add	r3, r1
 800116c:	3304      	adds	r3, #4
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	603b      	str	r3, [r7, #0]
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	683a      	ldr	r2, [r7, #0]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	689a      	ldr	r2, [r3, #8]
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	60da      	str	r2, [r3, #12]
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	697a      	ldr	r2, [r7, #20]
 8001186:	3204      	adds	r2, #4
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	1d1a      	adds	r2, r3, #4
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	609a      	str	r2, [r3, #8]
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001196:	4613      	mov	r3, r2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	4413      	add	r3, r2
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	4a2e      	ldr	r2, [pc, #184]	; (8001258 <xTaskResumeAll+0x1c4>)
 80011a0:	441a      	add	r2, r3
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	615a      	str	r2, [r3, #20]
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011aa:	492b      	ldr	r1, [pc, #172]	; (8001258 <xTaskResumeAll+0x1c4>)
 80011ac:	4613      	mov	r3, r2
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	4413      	add	r3, r2
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	440b      	add	r3, r1
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	1c59      	adds	r1, r3, #1
 80011ba:	4827      	ldr	r0, [pc, #156]	; (8001258 <xTaskResumeAll+0x1c4>)
 80011bc:	4613      	mov	r3, r2
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	4413      	add	r3, r2
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	4403      	add	r3, r0
 80011c6:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011cc:	4b23      	ldr	r3, [pc, #140]	; (800125c <xTaskResumeAll+0x1c8>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d302      	bcc.n	80011dc <xTaskResumeAll+0x148>
                    {
                        xYieldPending = pdTRUE;
 80011d6:	4b22      	ldr	r3, [pc, #136]	; (8001260 <xTaskResumeAll+0x1cc>)
 80011d8:	2201      	movs	r2, #1
 80011da:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80011dc:	4b1c      	ldr	r3, [pc, #112]	; (8001250 <xTaskResumeAll+0x1bc>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	f47f af70 	bne.w	80010c6 <xTaskResumeAll+0x32>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <xTaskResumeAll+0x15c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80011ec:	f000 fa1e 	bl	800162c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80011f0:	4b1c      	ldr	r3, [pc, #112]	; (8001264 <xTaskResumeAll+0x1d0>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d010      	beq.n	800121e <xTaskResumeAll+0x18a>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80011fc:	f000 f836 	bl	800126c <xTaskIncrementTick>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d002      	beq.n	800120c <xTaskResumeAll+0x178>
                            {
                                xYieldPending = pdTRUE;
 8001206:	4b16      	ldr	r3, [pc, #88]	; (8001260 <xTaskResumeAll+0x1cc>)
 8001208:	2201      	movs	r2, #1
 800120a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	3b01      	subs	r3, #1
 8001210:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d1f1      	bne.n	80011fc <xTaskResumeAll+0x168>

                        xPendedTicks = 0;
 8001218:	4b12      	ldr	r3, [pc, #72]	; (8001264 <xTaskResumeAll+0x1d0>)
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800121e:	4b10      	ldr	r3, [pc, #64]	; (8001260 <xTaskResumeAll+0x1cc>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d009      	beq.n	800123a <xTaskResumeAll+0x1a6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8001226:	2301      	movs	r3, #1
 8001228:	613b      	str	r3, [r7, #16]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800122a:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <xTaskResumeAll+0x1d4>)
 800122c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	f3bf 8f4f 	dsb	sy
 8001236:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800123a:	f000 fb37 	bl	80018ac <vPortExitCritical>

    return xAlreadyYielded;
 800123e:	693b      	ldr	r3, [r7, #16]
}
 8001240:	4618      	mov	r0, r3
 8001242:	3718      	adds	r7, #24
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	2000014c 	.word	0x2000014c
 800124c:	20000124 	.word	0x20000124
 8001250:	200000e4 	.word	0x200000e4
 8001254:	2000012c 	.word	0x2000012c
 8001258:	20000050 	.word	0x20000050
 800125c:	2000004c 	.word	0x2000004c
 8001260:	20000138 	.word	0x20000138
 8001264:	20000134 	.word	0x20000134
 8001268:	e000ed04 	.word	0xe000ed04

0800126c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b088      	sub	sp, #32
 8001270:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001272:	2300      	movs	r3, #0
 8001274:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001276:	4b75      	ldr	r3, [pc, #468]	; (800144c <xTaskIncrementTick+0x1e0>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2b00      	cmp	r3, #0
 800127c:	f040 80dc 	bne.w	8001438 <xTaskIncrementTick+0x1cc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001280:	4b73      	ldr	r3, [pc, #460]	; (8001450 <xTaskIncrementTick+0x1e4>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	3301      	adds	r3, #1
 8001286:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001288:	4a71      	ldr	r2, [pc, #452]	; (8001450 <xTaskIncrementTick+0x1e4>)
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d110      	bne.n	80012b6 <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 8001294:	4b6f      	ldr	r3, [pc, #444]	; (8001454 <xTaskIncrementTick+0x1e8>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	617b      	str	r3, [r7, #20]
 800129a:	4b6f      	ldr	r3, [pc, #444]	; (8001458 <xTaskIncrementTick+0x1ec>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a6d      	ldr	r2, [pc, #436]	; (8001454 <xTaskIncrementTick+0x1e8>)
 80012a0:	6013      	str	r3, [r2, #0]
 80012a2:	4a6d      	ldr	r2, [pc, #436]	; (8001458 <xTaskIncrementTick+0x1ec>)
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	6013      	str	r3, [r2, #0]
 80012a8:	4b6c      	ldr	r3, [pc, #432]	; (800145c <xTaskIncrementTick+0x1f0>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	3301      	adds	r3, #1
 80012ae:	4a6b      	ldr	r2, [pc, #428]	; (800145c <xTaskIncrementTick+0x1f0>)
 80012b0:	6013      	str	r3, [r2, #0]
 80012b2:	f000 f9bb 	bl	800162c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80012b6:	4b6a      	ldr	r3, [pc, #424]	; (8001460 <xTaskIncrementTick+0x1f4>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	429a      	cmp	r2, r3
 80012be:	f0c0 80a6 	bcc.w	800140e <xTaskIncrementTick+0x1a2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80012c2:	4b64      	ldr	r3, [pc, #400]	; (8001454 <xTaskIncrementTick+0x1e8>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d104      	bne.n	80012d6 <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80012cc:	4b64      	ldr	r3, [pc, #400]	; (8001460 <xTaskIncrementTick+0x1f4>)
 80012ce:	f04f 32ff 	mov.w	r2, #4294967295
 80012d2:	601a      	str	r2, [r3, #0]
                    break;
 80012d4:	e09b      	b.n	800140e <xTaskIncrementTick+0x1a2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80012d6:	4b5f      	ldr	r3, [pc, #380]	; (8001454 <xTaskIncrementTick+0x1e8>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	68db      	ldr	r3, [r3, #12]
 80012de:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d203      	bcs.n	80012f6 <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80012ee:	4a5c      	ldr	r2, [pc, #368]	; (8001460 <xTaskIncrementTick+0x1f4>)
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80012f4:	e08b      	b.n	800140e <xTaskIncrementTick+0x1a2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	60bb      	str	r3, [r7, #8]
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	68d2      	ldr	r2, [r2, #12]
 8001304:	609a      	str	r2, [r3, #8]
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	6892      	ldr	r2, [r2, #8]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	685a      	ldr	r2, [r3, #4]
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	3304      	adds	r3, #4
 8001318:	429a      	cmp	r2, r3
 800131a:	d103      	bne.n	8001324 <xTaskIncrementTick+0xb8>
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	68da      	ldr	r2, [r3, #12]
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	2200      	movs	r2, #0
 8001328:	615a      	str	r2, [r3, #20]
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	1e5a      	subs	r2, r3, #1
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001338:	2b00      	cmp	r3, #0
 800133a:	d01e      	beq.n	800137a <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001340:	607b      	str	r3, [r7, #4]
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	6a12      	ldr	r2, [r2, #32]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	6a1b      	ldr	r3, [r3, #32]
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	69d2      	ldr	r2, [r2, #28]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685a      	ldr	r2, [r3, #4]
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	3318      	adds	r3, #24
 800135e:	429a      	cmp	r2, r3
 8001360:	d103      	bne.n	800136a <xTaskIncrementTick+0xfe>
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	6a1a      	ldr	r2, [r3, #32]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	2200      	movs	r2, #0
 800136e:	629a      	str	r2, [r3, #40]	; 0x28
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	1e5a      	subs	r2, r3, #1
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800137e:	2201      	movs	r2, #1
 8001380:	409a      	lsls	r2, r3
 8001382:	4b38      	ldr	r3, [pc, #224]	; (8001464 <xTaskIncrementTick+0x1f8>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4313      	orrs	r3, r2
 8001388:	4a36      	ldr	r2, [pc, #216]	; (8001464 <xTaskIncrementTick+0x1f8>)
 800138a:	6013      	str	r3, [r2, #0]
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001390:	4935      	ldr	r1, [pc, #212]	; (8001468 <xTaskIncrementTick+0x1fc>)
 8001392:	4613      	mov	r3, r2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	4413      	add	r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	440b      	add	r3, r1
 800139c:	3304      	adds	r3, #4
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	603b      	str	r3, [r7, #0]
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	683a      	ldr	r2, [r7, #0]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	689a      	ldr	r2, [r3, #8]
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	60da      	str	r2, [r3, #12]
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	3204      	adds	r2, #4
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	1d1a      	adds	r2, r3, #4
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	609a      	str	r2, [r3, #8]
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013c6:	4613      	mov	r3, r2
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	4413      	add	r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	4a26      	ldr	r2, [pc, #152]	; (8001468 <xTaskIncrementTick+0x1fc>)
 80013d0:	441a      	add	r2, r3
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	615a      	str	r2, [r3, #20]
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013da:	4923      	ldr	r1, [pc, #140]	; (8001468 <xTaskIncrementTick+0x1fc>)
 80013dc:	4613      	mov	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	4413      	add	r3, r2
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	440b      	add	r3, r1
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	1c59      	adds	r1, r3, #1
 80013ea:	481f      	ldr	r0, [pc, #124]	; (8001468 <xTaskIncrementTick+0x1fc>)
 80013ec:	4613      	mov	r3, r2
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	4413      	add	r3, r2
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	4403      	add	r3, r0
 80013f6:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013fc:	4b1b      	ldr	r3, [pc, #108]	; (800146c <xTaskIncrementTick+0x200>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001402:	429a      	cmp	r2, r3
 8001404:	f4ff af5d 	bcc.w	80012c2 <xTaskIncrementTick+0x56>
                            {
                                xSwitchRequired = pdTRUE;
 8001408:	2301      	movs	r3, #1
 800140a:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800140c:	e759      	b.n	80012c2 <xTaskIncrementTick+0x56>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800140e:	4b17      	ldr	r3, [pc, #92]	; (800146c <xTaskIncrementTick+0x200>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001414:	4914      	ldr	r1, [pc, #80]	; (8001468 <xTaskIncrementTick+0x1fc>)
 8001416:	4613      	mov	r3, r2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	4413      	add	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	440b      	add	r3, r1
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2b01      	cmp	r3, #1
 8001424:	d901      	bls.n	800142a <xTaskIncrementTick+0x1be>
                {
                    xSwitchRequired = pdTRUE;
 8001426:	2301      	movs	r3, #1
 8001428:	61fb      	str	r3, [r7, #28]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800142a:	4b11      	ldr	r3, [pc, #68]	; (8001470 <xTaskIncrementTick+0x204>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d007      	beq.n	8001442 <xTaskIncrementTick+0x1d6>
                {
                    xSwitchRequired = pdTRUE;
 8001432:	2301      	movs	r3, #1
 8001434:	61fb      	str	r3, [r7, #28]
 8001436:	e004      	b.n	8001442 <xTaskIncrementTick+0x1d6>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001438:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <xTaskIncrementTick+0x208>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	3301      	adds	r3, #1
 800143e:	4a0d      	ldr	r2, [pc, #52]	; (8001474 <xTaskIncrementTick+0x208>)
 8001440:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8001442:	69fb      	ldr	r3, [r7, #28]
}
 8001444:	4618      	mov	r0, r3
 8001446:	3720      	adds	r7, #32
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	2000014c 	.word	0x2000014c
 8001450:	20000128 	.word	0x20000128
 8001454:	200000dc 	.word	0x200000dc
 8001458:	200000e0 	.word	0x200000e0
 800145c:	2000013c 	.word	0x2000013c
 8001460:	20000144 	.word	0x20000144
 8001464:	2000012c 	.word	0x2000012c
 8001468:	20000050 	.word	0x20000050
 800146c:	2000004c 	.word	0x2000004c
 8001470:	20000138 	.word	0x20000138
 8001474:	20000134 	.word	0x20000134

08001478 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800147e:	4b1c      	ldr	r3, [pc, #112]	; (80014f0 <vTaskSwitchContext+0x78>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d003      	beq.n	800148e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001486:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <vTaskSwitchContext+0x7c>)
 8001488:	2201      	movs	r2, #1
 800148a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800148c:	e02a      	b.n	80014e4 <vTaskSwitchContext+0x6c>
        xYieldPending = pdFALSE;
 800148e:	4b19      	ldr	r3, [pc, #100]	; (80014f4 <vTaskSwitchContext+0x7c>)
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001494:	4b18      	ldr	r3, [pc, #96]	; (80014f8 <vTaskSwitchContext+0x80>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	fab3 f383 	clz	r3, r3
 80014a0:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 80014a2:	78fb      	ldrb	r3, [r7, #3]
 80014a4:	f1c3 031f 	rsb	r3, r3, #31
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	68fa      	ldr	r2, [r7, #12]
 80014ac:	4613      	mov	r3, r2
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	4413      	add	r3, r2
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	4a11      	ldr	r2, [pc, #68]	; (80014fc <vTaskSwitchContext+0x84>)
 80014b6:	4413      	add	r3, r2
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	685a      	ldr	r2, [r3, #4]
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	685a      	ldr	r2, [r3, #4]
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	3308      	adds	r3, #8
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d104      	bne.n	80014da <vTaskSwitchContext+0x62>
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	685a      	ldr	r2, [r3, #4]
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	4a07      	ldr	r2, [pc, #28]	; (8001500 <vTaskSwitchContext+0x88>)
 80014e2:	6013      	str	r3, [r2, #0]
}
 80014e4:	bf00      	nop
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bc80      	pop	{r7}
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	2000014c 	.word	0x2000014c
 80014f4:	20000138 	.word	0x20000138
 80014f8:	2000012c 	.word	0x2000012c
 80014fc:	20000050 	.word	0x20000050
 8001500:	2000004c 	.word	0x2000004c

08001504 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800150c:	f000 f852 	bl	80015b4 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001510:	4b06      	ldr	r3, [pc, #24]	; (800152c <prvIdleTask+0x28>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d9f9      	bls.n	800150c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8001518:	4b05      	ldr	r3, [pc, #20]	; (8001530 <prvIdleTask+0x2c>)
 800151a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	f3bf 8f4f 	dsb	sy
 8001524:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001528:	e7f0      	b.n	800150c <prvIdleTask+0x8>
 800152a:	bf00      	nop
 800152c:	20000050 	.word	0x20000050
 8001530:	e000ed04 	.word	0xe000ed04

08001534 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800153a:	2300      	movs	r3, #0
 800153c:	607b      	str	r3, [r7, #4]
 800153e:	e00c      	b.n	800155a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	4613      	mov	r3, r2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	4413      	add	r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	4a12      	ldr	r2, [pc, #72]	; (8001594 <prvInitialiseTaskLists+0x60>)
 800154c:	4413      	add	r3, r2
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff fa11 	bl	8000976 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3301      	adds	r3, #1
 8001558:	607b      	str	r3, [r7, #4]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2b04      	cmp	r3, #4
 800155e:	d9ef      	bls.n	8001540 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001560:	480d      	ldr	r0, [pc, #52]	; (8001598 <prvInitialiseTaskLists+0x64>)
 8001562:	f7ff fa08 	bl	8000976 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001566:	480d      	ldr	r0, [pc, #52]	; (800159c <prvInitialiseTaskLists+0x68>)
 8001568:	f7ff fa05 	bl	8000976 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800156c:	480c      	ldr	r0, [pc, #48]	; (80015a0 <prvInitialiseTaskLists+0x6c>)
 800156e:	f7ff fa02 	bl	8000976 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8001572:	480c      	ldr	r0, [pc, #48]	; (80015a4 <prvInitialiseTaskLists+0x70>)
 8001574:	f7ff f9ff 	bl	8000976 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8001578:	480b      	ldr	r0, [pc, #44]	; (80015a8 <prvInitialiseTaskLists+0x74>)
 800157a:	f7ff f9fc 	bl	8000976 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800157e:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <prvInitialiseTaskLists+0x78>)
 8001580:	4a05      	ldr	r2, [pc, #20]	; (8001598 <prvInitialiseTaskLists+0x64>)
 8001582:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001584:	4b0a      	ldr	r3, [pc, #40]	; (80015b0 <prvInitialiseTaskLists+0x7c>)
 8001586:	4a05      	ldr	r2, [pc, #20]	; (800159c <prvInitialiseTaskLists+0x68>)
 8001588:	601a      	str	r2, [r3, #0]
}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	20000050 	.word	0x20000050
 8001598:	200000b4 	.word	0x200000b4
 800159c:	200000c8 	.word	0x200000c8
 80015a0:	200000e4 	.word	0x200000e4
 80015a4:	200000f8 	.word	0x200000f8
 80015a8:	20000110 	.word	0x20000110
 80015ac:	200000dc 	.word	0x200000dc
 80015b0:	200000e0 	.word	0x200000e0

080015b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80015ba:	e019      	b.n	80015f0 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80015bc:	f000 f95e 	bl	800187c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80015c0:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <prvCheckTasksWaitingTermination+0x4c>)
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3304      	adds	r3, #4
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff fa58 	bl	8000a82 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80015d2:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <prvCheckTasksWaitingTermination+0x50>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	3b01      	subs	r3, #1
 80015d8:	4a0a      	ldr	r2, [pc, #40]	; (8001604 <prvCheckTasksWaitingTermination+0x50>)
 80015da:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80015dc:	4b0a      	ldr	r3, [pc, #40]	; (8001608 <prvCheckTasksWaitingTermination+0x54>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	3b01      	subs	r3, #1
 80015e2:	4a09      	ldr	r2, [pc, #36]	; (8001608 <prvCheckTasksWaitingTermination+0x54>)
 80015e4:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80015e6:	f000 f961 	bl	80018ac <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f000 f80e 	bl	800160c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80015f0:	4b05      	ldr	r3, [pc, #20]	; (8001608 <prvCheckTasksWaitingTermination+0x54>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d1e1      	bne.n	80015bc <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80015f8:	bf00      	nop
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	200000f8 	.word	0x200000f8
 8001604:	20000124 	.word	0x20000124
 8001608:	2000010c 	.word	0x2000010c

0800160c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001618:	4618      	mov	r0, r3
 800161a:	f000 fa6d 	bl	8001af8 <vPortFree>
                vPortFree( pxTCB );
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f000 fa6a 	bl	8001af8 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001624:	bf00      	nop
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001630:	4b09      	ldr	r3, [pc, #36]	; (8001658 <prvResetNextTaskUnblockTime+0x2c>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d104      	bne.n	8001644 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800163a:	4b08      	ldr	r3, [pc, #32]	; (800165c <prvResetNextTaskUnblockTime+0x30>)
 800163c:	f04f 32ff 	mov.w	r2, #4294967295
 8001640:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001642:	e005      	b.n	8001650 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001644:	4b04      	ldr	r3, [pc, #16]	; (8001658 <prvResetNextTaskUnblockTime+0x2c>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a03      	ldr	r2, [pc, #12]	; (800165c <prvResetNextTaskUnblockTime+0x30>)
 800164e:	6013      	str	r3, [r2, #0]
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr
 8001658:	200000dc 	.word	0x200000dc
 800165c:	20000144 	.word	0x20000144

08001660 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800166a:	4b36      	ldr	r3, [pc, #216]	; (8001744 <prvAddCurrentTaskToDelayedList+0xe4>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001670:	4b35      	ldr	r3, [pc, #212]	; (8001748 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	3304      	adds	r3, #4
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff fa03 	bl	8000a82 <uxListRemove>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d10b      	bne.n	800169a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001682:	4b31      	ldr	r3, [pc, #196]	; (8001748 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001688:	2201      	movs	r2, #1
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43da      	mvns	r2, r3
 8001690:	4b2e      	ldr	r3, [pc, #184]	; (800174c <prvAddCurrentTaskToDelayedList+0xec>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4013      	ands	r3, r2
 8001696:	4a2d      	ldr	r2, [pc, #180]	; (800174c <prvAddCurrentTaskToDelayedList+0xec>)
 8001698:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016a0:	d124      	bne.n	80016ec <prvAddCurrentTaskToDelayedList+0x8c>
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d021      	beq.n	80016ec <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80016a8:	4b29      	ldr	r3, [pc, #164]	; (8001750 <prvAddCurrentTaskToDelayedList+0xf0>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	613b      	str	r3, [r7, #16]
 80016ae:	4b26      	ldr	r3, [pc, #152]	; (8001748 <prvAddCurrentTaskToDelayedList+0xe8>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	609a      	str	r2, [r3, #8]
 80016b6:	4b24      	ldr	r3, [pc, #144]	; (8001748 <prvAddCurrentTaskToDelayedList+0xe8>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	6892      	ldr	r2, [r2, #8]
 80016be:	60da      	str	r2, [r3, #12]
 80016c0:	4b21      	ldr	r3, [pc, #132]	; (8001748 <prvAddCurrentTaskToDelayedList+0xe8>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	3204      	adds	r2, #4
 80016ca:	605a      	str	r2, [r3, #4]
 80016cc:	4b1e      	ldr	r3, [pc, #120]	; (8001748 <prvAddCurrentTaskToDelayedList+0xe8>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	1d1a      	adds	r2, r3, #4
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	609a      	str	r2, [r3, #8]
 80016d6:	4b1c      	ldr	r3, [pc, #112]	; (8001748 <prvAddCurrentTaskToDelayedList+0xe8>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a1d      	ldr	r2, [pc, #116]	; (8001750 <prvAddCurrentTaskToDelayedList+0xf0>)
 80016dc:	615a      	str	r2, [r3, #20]
 80016de:	4b1c      	ldr	r3, [pc, #112]	; (8001750 <prvAddCurrentTaskToDelayedList+0xf0>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	3301      	adds	r3, #1
 80016e4:	4a1a      	ldr	r2, [pc, #104]	; (8001750 <prvAddCurrentTaskToDelayedList+0xf0>)
 80016e6:	6013      	str	r3, [r2, #0]
 80016e8:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80016ea:	e026      	b.n	800173a <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80016ec:	697a      	ldr	r2, [r7, #20]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4413      	add	r3, r2
 80016f2:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80016f4:	4b14      	ldr	r3, [pc, #80]	; (8001748 <prvAddCurrentTaskToDelayedList+0xe8>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	68fa      	ldr	r2, [r7, #12]
 80016fa:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80016fc:	68fa      	ldr	r2, [r7, #12]
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	429a      	cmp	r2, r3
 8001702:	d209      	bcs.n	8001718 <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001704:	4b13      	ldr	r3, [pc, #76]	; (8001754 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <prvAddCurrentTaskToDelayedList+0xe8>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	3304      	adds	r3, #4
 800170e:	4619      	mov	r1, r3
 8001710:	4610      	mov	r0, r2
 8001712:	f7ff f97e 	bl	8000a12 <vListInsert>
}
 8001716:	e010      	b.n	800173a <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001718:	4b0f      	ldr	r3, [pc, #60]	; (8001758 <prvAddCurrentTaskToDelayedList+0xf8>)
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <prvAddCurrentTaskToDelayedList+0xe8>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	3304      	adds	r3, #4
 8001722:	4619      	mov	r1, r3
 8001724:	4610      	mov	r0, r2
 8001726:	f7ff f974 	bl	8000a12 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800172a:	4b0c      	ldr	r3, [pc, #48]	; (800175c <prvAddCurrentTaskToDelayedList+0xfc>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	429a      	cmp	r2, r3
 8001732:	d202      	bcs.n	800173a <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 8001734:	4a09      	ldr	r2, [pc, #36]	; (800175c <prvAddCurrentTaskToDelayedList+0xfc>)
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	6013      	str	r3, [r2, #0]
}
 800173a:	bf00      	nop
 800173c:	3718      	adds	r7, #24
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000128 	.word	0x20000128
 8001748:	2000004c 	.word	0x2000004c
 800174c:	2000012c 	.word	0x2000012c
 8001750:	20000110 	.word	0x20000110
 8001754:	200000e0 	.word	0x200000e0
 8001758:	200000dc 	.word	0x200000dc
 800175c:	20000144 	.word	0x20000144

08001760 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	3b04      	subs	r3, #4
 8001770:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001778:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	3b04      	subs	r3, #4
 800177e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	f023 0201 	bic.w	r2, r3, #1
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	3b04      	subs	r3, #4
 800178e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8001790:	4a08      	ldr	r2, [pc, #32]	; (80017b4 <pxPortInitialiseStack+0x54>)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	3b14      	subs	r3, #20
 800179a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	3b20      	subs	r3, #32
 80017a6:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80017a8:	68fb      	ldr	r3, [r7, #12]
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3714      	adds	r7, #20
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr
 80017b4:	080017b9 	.word	0x080017b9

080017b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 80017be:	2300      	movs	r3, #0
 80017c0:	603b      	str	r3, [r7, #0]
        __asm volatile
 80017c2:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80017c6:	f383 8811 	msr	BASEPRI, r3
 80017ca:	f3bf 8f6f 	isb	sy
 80017ce:	f3bf 8f4f 	dsb	sy
 80017d2:	607b      	str	r3, [r7, #4]
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80017d4:	bf00      	nop
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d0fc      	beq.n	80017d6 <prvTaskExitError+0x1e>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80017dc:	bf00      	nop
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bc80      	pop	{r7}
 80017e4:	4770      	bx	lr
	...

080017f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80017f0:	4b07      	ldr	r3, [pc, #28]	; (8001810 <pxCurrentTCBConst2>)
 80017f2:	6819      	ldr	r1, [r3, #0]
 80017f4:	6808      	ldr	r0, [r1, #0]
 80017f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80017fa:	f380 8809 	msr	PSP, r0
 80017fe:	f3bf 8f6f 	isb	sy
 8001802:	f04f 0000 	mov.w	r0, #0
 8001806:	f380 8811 	msr	BASEPRI, r0
 800180a:	f04e 0e0d 	orr.w	lr, lr, #13
 800180e:	4770      	bx	lr

08001810 <pxCurrentTCBConst2>:
 8001810:	2000004c 	.word	0x2000004c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8001814:	bf00      	nop
 8001816:	bf00      	nop

08001818 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8001818:	4806      	ldr	r0, [pc, #24]	; (8001834 <prvPortStartFirstTask+0x1c>)
 800181a:	6800      	ldr	r0, [r0, #0]
 800181c:	6800      	ldr	r0, [r0, #0]
 800181e:	f380 8808 	msr	MSP, r0
 8001822:	b662      	cpsie	i
 8001824:	b661      	cpsie	f
 8001826:	f3bf 8f4f 	dsb	sy
 800182a:	f3bf 8f6f 	isb	sy
 800182e:	df00      	svc	0
 8001830:	bf00      	nop
 8001832:	0000      	.short	0x0000
 8001834:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8001838:	bf00      	nop
 800183a:	bf00      	nop

0800183c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
            *pucFirstUserPriorityRegister = ulOriginalPriority;
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8001840:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <xPortStartScheduler+0x38>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a0b      	ldr	r2, [pc, #44]	; (8001874 <xPortStartScheduler+0x38>)
 8001846:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800184a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800184c:	4b09      	ldr	r3, [pc, #36]	; (8001874 <xPortStartScheduler+0x38>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a08      	ldr	r2, [pc, #32]	; (8001874 <xPortStartScheduler+0x38>)
 8001852:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001856:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001858:	f000 f886 	bl	8001968 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <xPortStartScheduler+0x3c>)
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8001862:	f7ff ffd9 	bl	8001818 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8001866:	f7ff fe07 	bl	8001478 <vTaskSwitchContext>
    prvTaskExitError();
 800186a:	f7ff ffa5 	bl	80017b8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800186e:	2300      	movs	r3, #0
}
 8001870:	4618      	mov	r0, r3
 8001872:	bd80      	pop	{r7, pc}
 8001874:	e000ed20 	.word	0xe000ed20
 8001878:	20000004 	.word	0x20000004

0800187c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001886:	f383 8811 	msr	BASEPRI, r3
 800188a:	f3bf 8f6f 	isb	sy
 800188e:	f3bf 8f4f 	dsb	sy
 8001892:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8001894:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <vPortEnterCritical+0x2c>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	3301      	adds	r3, #1
 800189a:	4a03      	ldr	r2, [pc, #12]	; (80018a8 <vPortEnterCritical+0x2c>)
 800189c:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 800189e:	bf00      	nop
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bc80      	pop	{r7}
 80018a6:	4770      	bx	lr
 80018a8:	20000004 	.word	0x20000004

080018ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 80018b2:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <vPortExitCritical+0x2c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	3b01      	subs	r3, #1
 80018b8:	4a07      	ldr	r2, [pc, #28]	; (80018d8 <vPortExitCritical+0x2c>)
 80018ba:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80018bc:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <vPortExitCritical+0x2c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d104      	bne.n	80018ce <vPortExitCritical+0x22>
 80018c4:	2300      	movs	r3, #0
 80018c6:	607b      	str	r3, [r7, #4]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr
 80018d8:	20000004 	.word	0x20000004
 80018dc:	00000000 	.word	0x00000000

080018e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80018e0:	f3ef 8009 	mrs	r0, PSP
 80018e4:	f3bf 8f6f 	isb	sy
 80018e8:	4b0d      	ldr	r3, [pc, #52]	; (8001920 <pxCurrentTCBConst>)
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80018f0:	6010      	str	r0, [r2, #0]
 80018f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80018f6:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 80018fa:	f380 8811 	msr	BASEPRI, r0
 80018fe:	f7ff fdbb 	bl	8001478 <vTaskSwitchContext>
 8001902:	f04f 0000 	mov.w	r0, #0
 8001906:	f380 8811 	msr	BASEPRI, r0
 800190a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800190e:	6819      	ldr	r1, [r3, #0]
 8001910:	6808      	ldr	r0, [r1, #0]
 8001912:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001916:	f380 8809 	msr	PSP, r0
 800191a:	f3bf 8f6f 	isb	sy
 800191e:	4770      	bx	lr

08001920 <pxCurrentTCBConst>:
 8001920:	2000004c 	.word	0x2000004c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001924:	bf00      	nop
 8001926:	bf00      	nop

08001928 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
        __asm volatile
 800192e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001932:	f383 8811 	msr	BASEPRI, r3
 8001936:	f3bf 8f6f 	isb	sy
 800193a:	f3bf 8f4f 	dsb	sy
 800193e:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8001940:	f7ff fc94 	bl	800126c <xTaskIncrementTick>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d003      	beq.n	8001952 <SysTick_Handler+0x2a>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800194a:	4b06      	ldr	r3, [pc, #24]	; (8001964 <SysTick_Handler+0x3c>)
 800194c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	2300      	movs	r3, #0
 8001954:	603b      	str	r3, [r7, #0]
        __asm volatile
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 800195c:	bf00      	nop
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	e000ed04 	.word	0xe000ed04

08001968 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800196c:	4b07      	ldr	r3, [pc, #28]	; (800198c <vPortSetupTimerInterrupt+0x24>)
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001972:	4b07      	ldr	r3, [pc, #28]	; (8001990 <vPortSetupTimerInterrupt+0x28>)
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001978:	4b06      	ldr	r3, [pc, #24]	; (8001994 <vPortSetupTimerInterrupt+0x2c>)
 800197a:	4a07      	ldr	r2, [pc, #28]	; (8001998 <vPortSetupTimerInterrupt+0x30>)
 800197c:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800197e:	4b03      	ldr	r3, [pc, #12]	; (800198c <vPortSetupTimerInterrupt+0x24>)
 8001980:	2207      	movs	r2, #7
 8001982:	601a      	str	r2, [r3, #0]
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr
 800198c:	e000e010 	.word	0xe000e010
 8001990:	e000e018 	.word	0xe000e018
 8001994:	e000e014 	.word	0xe000e014
 8001998:	0001193f 	.word	0x0001193f

0800199c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	60fb      	str	r3, [r7, #12]

    vTaskSuspendAll();
 80019a8:	f7ff fb66 	bl	8001078 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80019ac:	4b4c      	ldr	r3, [pc, #304]	; (8001ae0 <pvPortMalloc+0x144>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d101      	bne.n	80019b8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80019b4:	f000 f8e0 	bl	8001b78 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80019b8:	4b4a      	ldr	r3, [pc, #296]	; (8001ae4 <pvPortMalloc+0x148>)
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	4013      	ands	r3, r2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	f040 8086 	bne.w	8001ad2 <pvPortMalloc+0x136>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d01e      	beq.n	8001a0a <pvPortMalloc+0x6e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80019cc:	2208      	movs	r2, #8
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d218      	bcs.n	8001a0a <pvPortMalloc+0x6e>
            {
                xWantedSize += xHeapStructSize;
 80019d8:	2208      	movs	r2, #8
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4413      	add	r3, r2
 80019de:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d011      	beq.n	8001a0e <pvPortMalloc+0x72>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f023 0307 	bic.w	r3, r3, #7
 80019f0:	3308      	adds	r3, #8
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d205      	bcs.n	8001a04 <pvPortMalloc+0x68>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f023 0307 	bic.w	r3, r3, #7
 80019fe:	3308      	adds	r3, #8
 8001a00:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001a02:	e004      	b.n	8001a0e <pvPortMalloc+0x72>
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
                    }
                    else
                    {
                        xWantedSize = 0;
 8001a04:	2300      	movs	r3, #0
 8001a06:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001a08:	e001      	b.n	8001a0e <pvPortMalloc+0x72>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	607b      	str	r3, [r7, #4]
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d05e      	beq.n	8001ad2 <pvPortMalloc+0x136>
 8001a14:	4b34      	ldr	r3, [pc, #208]	; (8001ae8 <pvPortMalloc+0x14c>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d859      	bhi.n	8001ad2 <pvPortMalloc+0x136>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8001a1e:	4b33      	ldr	r3, [pc, #204]	; (8001aec <pvPortMalloc+0x150>)
 8001a20:	613b      	str	r3, [r7, #16]
                pxBlock = xStart.pxNextFreeBlock;
 8001a22:	4b32      	ldr	r3, [pc, #200]	; (8001aec <pvPortMalloc+0x150>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	617b      	str	r3, [r7, #20]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001a28:	e004      	b.n	8001a34 <pvPortMalloc+0x98>
                {
                    pxPreviousBlock = pxBlock;
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	613b      	str	r3, [r7, #16]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	617b      	str	r3, [r7, #20]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d903      	bls.n	8001a46 <pvPortMalloc+0xaa>
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1f1      	bne.n	8001a2a <pvPortMalloc+0x8e>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8001a46:	4b26      	ldr	r3, [pc, #152]	; (8001ae0 <pvPortMalloc+0x144>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	697a      	ldr	r2, [r7, #20]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d040      	beq.n	8001ad2 <pvPortMalloc+0x136>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2208      	movs	r2, #8
 8001a56:	4413      	add	r3, r2
 8001a58:	60fb      	str	r3, [r7, #12]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	685a      	ldr	r2, [r3, #4]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	1ad2      	subs	r2, r2, r3
 8001a6a:	2308      	movs	r3, #8
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d90f      	bls.n	8001a92 <pvPortMalloc+0xf6>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001a72:	697a      	ldr	r2, [r7, #20]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4413      	add	r3, r2
 8001a78:	60bb      	str	r3, [r7, #8]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	685a      	ldr	r2, [r3, #4]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	1ad2      	subs	r2, r2, r3
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001a8c:	68b8      	ldr	r0, [r7, #8]
 8001a8e:	f000 f8d5 	bl	8001c3c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001a92:	4b15      	ldr	r3, [pc, #84]	; (8001ae8 <pvPortMalloc+0x14c>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	4a12      	ldr	r2, [pc, #72]	; (8001ae8 <pvPortMalloc+0x14c>)
 8001a9e:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001aa0:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <pvPortMalloc+0x14c>)
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	4b12      	ldr	r3, [pc, #72]	; (8001af0 <pvPortMalloc+0x154>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d203      	bcs.n	8001ab4 <pvPortMalloc+0x118>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001aac:	4b0e      	ldr	r3, [pc, #56]	; (8001ae8 <pvPortMalloc+0x14c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a0f      	ldr	r2, [pc, #60]	; (8001af0 <pvPortMalloc+0x154>)
 8001ab2:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	685a      	ldr	r2, [r3, #4]
 8001ab8:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <pvPortMalloc+0x148>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	431a      	orrs	r2, r3
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8001ac8:	4b0a      	ldr	r3, [pc, #40]	; (8001af4 <pvPortMalloc+0x158>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	3301      	adds	r3, #1
 8001ace:	4a09      	ldr	r2, [pc, #36]	; (8001af4 <pvPortMalloc+0x158>)
 8001ad0:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8001ad2:	f7ff fadf 	bl	8001094 <xTaskResumeAll>
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3718      	adds	r7, #24
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20004558 	.word	0x20004558
 8001ae4:	2000456c 	.word	0x2000456c
 8001ae8:	2000455c 	.word	0x2000455c
 8001aec:	20004550 	.word	0x20004550
 8001af0:	20004560 	.word	0x20004560
 8001af4:	20004564 	.word	0x20004564

08001af8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d02c      	beq.n	8001b64 <vPortFree+0x6c>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8001b0a:	2308      	movs	r3, #8
 8001b0c:	425b      	negs	r3, r3
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	4413      	add	r3, r2
 8001b12:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	60bb      	str	r3, [r7, #8]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	685a      	ldr	r2, [r3, #4]
 8001b1c:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <vPortFree+0x74>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4013      	ands	r3, r2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d01e      	beq.n	8001b64 <vPortFree+0x6c>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d11a      	bne.n	8001b64 <vPortFree+0x6c>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	4b0e      	ldr	r3, [pc, #56]	; (8001b6c <vPortFree+0x74>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	43db      	mvns	r3, r3
 8001b38:	401a      	ands	r2, r3
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8001b3e:	f7ff fa9b 	bl	8001078 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	685a      	ldr	r2, [r3, #4]
 8001b46:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <vPortFree+0x78>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	4a08      	ldr	r2, [pc, #32]	; (8001b70 <vPortFree+0x78>)
 8001b4e:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001b50:	68b8      	ldr	r0, [r7, #8]
 8001b52:	f000 f873 	bl	8001c3c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8001b56:	4b07      	ldr	r3, [pc, #28]	; (8001b74 <vPortFree+0x7c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	4a05      	ldr	r2, [pc, #20]	; (8001b74 <vPortFree+0x7c>)
 8001b5e:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8001b60:	f7ff fa98 	bl	8001094 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8001b64:	bf00      	nop
 8001b66:	3710      	adds	r7, #16
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	2000456c 	.word	0x2000456c
 8001b70:	2000455c 	.word	0x2000455c
 8001b74:	20004568 	.word	0x20004568

08001b78 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001b7e:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8001b82:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8001b84:	4b27      	ldr	r3, [pc, #156]	; (8001c24 <prvHeapInit+0xac>)
 8001b86:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f003 0307 	and.w	r3, r3, #7
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d00c      	beq.n	8001bac <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	3307      	adds	r3, #7
 8001b96:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f023 0307 	bic.w	r3, r3, #7
 8001b9e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001ba0:	68ba      	ldr	r2, [r7, #8]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	4a1f      	ldr	r2, [pc, #124]	; (8001c24 <prvHeapInit+0xac>)
 8001ba8:	4413      	add	r3, r2
 8001baa:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001bb0:	4a1d      	ldr	r2, [pc, #116]	; (8001c28 <prvHeapInit+0xb0>)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8001bb6:	4b1c      	ldr	r3, [pc, #112]	; (8001c28 <prvHeapInit+0xb0>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68ba      	ldr	r2, [r7, #8]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8001bc4:	2208      	movs	r2, #8
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	1a9b      	subs	r3, r3, r2
 8001bca:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f023 0307 	bic.w	r3, r3, #7
 8001bd2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	4a15      	ldr	r2, [pc, #84]	; (8001c2c <prvHeapInit+0xb4>)
 8001bd8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8001bda:	4b14      	ldr	r3, [pc, #80]	; (8001c2c <prvHeapInit+0xb4>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2200      	movs	r2, #0
 8001be0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8001be2:	4b12      	ldr	r3, [pc, #72]	; (8001c2c <prvHeapInit+0xb4>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2200      	movs	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	68fa      	ldr	r2, [r7, #12]
 8001bf2:	1ad2      	subs	r2, r2, r3
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001bf8:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <prvHeapInit+0xb4>)
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	4a0a      	ldr	r2, [pc, #40]	; (8001c30 <prvHeapInit+0xb8>)
 8001c06:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	4a09      	ldr	r2, [pc, #36]	; (8001c34 <prvHeapInit+0xbc>)
 8001c0e:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001c10:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <prvHeapInit+0xc0>)
 8001c12:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001c16:	601a      	str	r2, [r3, #0]
}
 8001c18:	bf00      	nop
 8001c1a:	3714      	adds	r7, #20
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bc80      	pop	{r7}
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	20000150 	.word	0x20000150
 8001c28:	20004550 	.word	0x20004550
 8001c2c:	20004558 	.word	0x20004558
 8001c30:	20004560 	.word	0x20004560
 8001c34:	2000455c 	.word	0x2000455c
 8001c38:	2000456c 	.word	0x2000456c

08001c3c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001c44:	4b27      	ldr	r3, [pc, #156]	; (8001ce4 <prvInsertBlockIntoFreeList+0xa8>)
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	e002      	b.n	8001c50 <prvInsertBlockIntoFreeList+0x14>
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d8f7      	bhi.n	8001c4a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	68ba      	ldr	r2, [r7, #8]
 8001c64:	4413      	add	r3, r2
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d108      	bne.n	8001c7e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	685a      	ldr	r2, [r3, #4]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	441a      	add	r2, r3
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	68ba      	ldr	r2, [r7, #8]
 8001c88:	441a      	add	r2, r3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d118      	bne.n	8001cc4 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	4b14      	ldr	r3, [pc, #80]	; (8001ce8 <prvInsertBlockIntoFreeList+0xac>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d00d      	beq.n	8001cba <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685a      	ldr	r2, [r3, #4]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	441a      	add	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	e008      	b.n	8001ccc <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001cba:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <prvInsertBlockIntoFreeList+0xac>)
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	e003      	b.n	8001ccc <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8001ccc:	68fa      	ldr	r2, [r7, #12]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d002      	beq.n	8001cda <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001cda:	bf00      	nop
 8001cdc:	3714      	adds	r7, #20
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr
 8001ce4:	20004550 	.word	0x20004550
 8001ce8:	20004558 	.word	0x20004558

08001cec <EXTI0_IRQHandler>:

/*==========================================================*/
/* ISR FUNCTIONS */
/*==========================================================*/
void EXTI0_IRQHandler(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<0);
 8001cf0:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <EXTI0_IRQHandler+0x1c>)
 8001cf2:	695b      	ldr	r3, [r3, #20]
 8001cf4:	4a04      	ldr	r2, [pc, #16]	; (8001d08 <EXTI0_IRQHandler+0x1c>)
 8001cf6:	f043 0301 	orr.w	r3, r3, #1
 8001cfa:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[0]();
 8001cfc:	4b03      	ldr	r3, [pc, #12]	; (8001d0c <EXTI0_IRQHandler+0x20>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4798      	blx	r3

}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40010400 	.word	0x40010400
 8001d0c:	20004574 	.word	0x20004574

08001d10 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<1);
 8001d14:	4b05      	ldr	r3, [pc, #20]	; (8001d2c <EXTI1_IRQHandler+0x1c>)
 8001d16:	695b      	ldr	r3, [r3, #20]
 8001d18:	4a04      	ldr	r2, [pc, #16]	; (8001d2c <EXTI1_IRQHandler+0x1c>)
 8001d1a:	f043 0302 	orr.w	r3, r3, #2
 8001d1e:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[1]();
 8001d20:	4b03      	ldr	r3, [pc, #12]	; (8001d30 <EXTI1_IRQHandler+0x20>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	4798      	blx	r3

}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40010400 	.word	0x40010400
 8001d30:	20004574 	.word	0x20004574

08001d34 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<2);
 8001d38:	4b05      	ldr	r3, [pc, #20]	; (8001d50 <EXTI2_IRQHandler+0x1c>)
 8001d3a:	695b      	ldr	r3, [r3, #20]
 8001d3c:	4a04      	ldr	r2, [pc, #16]	; (8001d50 <EXTI2_IRQHandler+0x1c>)
 8001d3e:	f043 0304 	orr.w	r3, r3, #4
 8001d42:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[2]();
 8001d44:	4b03      	ldr	r3, [pc, #12]	; (8001d54 <EXTI2_IRQHandler+0x20>)
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	4798      	blx	r3
}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40010400 	.word	0x40010400
 8001d54:	20004574 	.word	0x20004574

08001d58 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<3);
 8001d5c:	4b05      	ldr	r3, [pc, #20]	; (8001d74 <EXTI3_IRQHandler+0x1c>)
 8001d5e:	695b      	ldr	r3, [r3, #20]
 8001d60:	4a04      	ldr	r2, [pc, #16]	; (8001d74 <EXTI3_IRQHandler+0x1c>)
 8001d62:	f043 0308 	orr.w	r3, r3, #8
 8001d66:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[3]();
 8001d68:	4b03      	ldr	r3, [pc, #12]	; (8001d78 <EXTI3_IRQHandler+0x20>)
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	4798      	blx	r3
}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40010400 	.word	0x40010400
 8001d78:	20004574 	.word	0x20004574

08001d7c <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<4);
 8001d80:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <EXTI4_IRQHandler+0x1c>)
 8001d82:	695b      	ldr	r3, [r3, #20]
 8001d84:	4a04      	ldr	r2, [pc, #16]	; (8001d98 <EXTI4_IRQHandler+0x1c>)
 8001d86:	f043 0310 	orr.w	r3, r3, #16
 8001d8a:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[4]();
 8001d8c:	4b03      	ldr	r3, [pc, #12]	; (8001d9c <EXTI4_IRQHandler+0x20>)
 8001d8e:	691b      	ldr	r3, [r3, #16]
 8001d90:	4798      	blx	r3
}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40010400 	.word	0x40010400
 8001d9c:	20004574 	.word	0x20004574

08001da0 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	if(EXTI->PR & 1<<5) { EXTI->PR |=(1<<5) ; GP_IRQ_CALLBACK[5](); }
 8001da4:	4b26      	ldr	r3, [pc, #152]	; (8001e40 <EXTI9_5_IRQHandler+0xa0>)
 8001da6:	695b      	ldr	r3, [r3, #20]
 8001da8:	f003 0320 	and.w	r3, r3, #32
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d008      	beq.n	8001dc2 <EXTI9_5_IRQHandler+0x22>
 8001db0:	4b23      	ldr	r3, [pc, #140]	; (8001e40 <EXTI9_5_IRQHandler+0xa0>)
 8001db2:	695b      	ldr	r3, [r3, #20]
 8001db4:	4a22      	ldr	r2, [pc, #136]	; (8001e40 <EXTI9_5_IRQHandler+0xa0>)
 8001db6:	f043 0320 	orr.w	r3, r3, #32
 8001dba:	6153      	str	r3, [r2, #20]
 8001dbc:	4b21      	ldr	r3, [pc, #132]	; (8001e44 <EXTI9_5_IRQHandler+0xa4>)
 8001dbe:	695b      	ldr	r3, [r3, #20]
 8001dc0:	4798      	blx	r3
	if(EXTI->PR & 1<<6) { EXTI->PR |=(1<<6) ; GP_IRQ_CALLBACK[6](); }
 8001dc2:	4b1f      	ldr	r3, [pc, #124]	; (8001e40 <EXTI9_5_IRQHandler+0xa0>)
 8001dc4:	695b      	ldr	r3, [r3, #20]
 8001dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d008      	beq.n	8001de0 <EXTI9_5_IRQHandler+0x40>
 8001dce:	4b1c      	ldr	r3, [pc, #112]	; (8001e40 <EXTI9_5_IRQHandler+0xa0>)
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	4a1b      	ldr	r2, [pc, #108]	; (8001e40 <EXTI9_5_IRQHandler+0xa0>)
 8001dd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dd8:	6153      	str	r3, [r2, #20]
 8001dda:	4b1a      	ldr	r3, [pc, #104]	; (8001e44 <EXTI9_5_IRQHandler+0xa4>)
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	4798      	blx	r3
	if(EXTI->PR & 1<<7) { EXTI->PR |=(1<<7) ; GP_IRQ_CALLBACK[7](); }
 8001de0:	4b17      	ldr	r3, [pc, #92]	; (8001e40 <EXTI9_5_IRQHandler+0xa0>)
 8001de2:	695b      	ldr	r3, [r3, #20]
 8001de4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d008      	beq.n	8001dfe <EXTI9_5_IRQHandler+0x5e>
 8001dec:	4b14      	ldr	r3, [pc, #80]	; (8001e40 <EXTI9_5_IRQHandler+0xa0>)
 8001dee:	695b      	ldr	r3, [r3, #20]
 8001df0:	4a13      	ldr	r2, [pc, #76]	; (8001e40 <EXTI9_5_IRQHandler+0xa0>)
 8001df2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001df6:	6153      	str	r3, [r2, #20]
 8001df8:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <EXTI9_5_IRQHandler+0xa4>)
 8001dfa:	69db      	ldr	r3, [r3, #28]
 8001dfc:	4798      	blx	r3
	if(EXTI->PR & 1<<8) { EXTI->PR |=(1<<8) ; GP_IRQ_CALLBACK[8](); }
 8001dfe:	4b10      	ldr	r3, [pc, #64]	; (8001e40 <EXTI9_5_IRQHandler+0xa0>)
 8001e00:	695b      	ldr	r3, [r3, #20]
 8001e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d008      	beq.n	8001e1c <EXTI9_5_IRQHandler+0x7c>
 8001e0a:	4b0d      	ldr	r3, [pc, #52]	; (8001e40 <EXTI9_5_IRQHandler+0xa0>)
 8001e0c:	695b      	ldr	r3, [r3, #20]
 8001e0e:	4a0c      	ldr	r2, [pc, #48]	; (8001e40 <EXTI9_5_IRQHandler+0xa0>)
 8001e10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e14:	6153      	str	r3, [r2, #20]
 8001e16:	4b0b      	ldr	r3, [pc, #44]	; (8001e44 <EXTI9_5_IRQHandler+0xa4>)
 8001e18:	6a1b      	ldr	r3, [r3, #32]
 8001e1a:	4798      	blx	r3
	if(EXTI->PR & 1<<9) { EXTI->PR |=(1<<9) ; GP_IRQ_CALLBACK[9](); }
 8001e1c:	4b08      	ldr	r3, [pc, #32]	; (8001e40 <EXTI9_5_IRQHandler+0xa0>)
 8001e1e:	695b      	ldr	r3, [r3, #20]
 8001e20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d008      	beq.n	8001e3a <EXTI9_5_IRQHandler+0x9a>
 8001e28:	4b05      	ldr	r3, [pc, #20]	; (8001e40 <EXTI9_5_IRQHandler+0xa0>)
 8001e2a:	695b      	ldr	r3, [r3, #20]
 8001e2c:	4a04      	ldr	r2, [pc, #16]	; (8001e40 <EXTI9_5_IRQHandler+0xa0>)
 8001e2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e32:	6153      	str	r3, [r2, #20]
 8001e34:	4b03      	ldr	r3, [pc, #12]	; (8001e44 <EXTI9_5_IRQHandler+0xa4>)
 8001e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e38:	4798      	blx	r3

}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40010400 	.word	0x40010400
 8001e44:	20004574 	.word	0x20004574

08001e48 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
	//Clear Binding Register (EXTI_PR) This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |=(1<<0);
 8001e4c:	4b04      	ldr	r3, [pc, #16]	; (8001e60 <EXTI15_10_IRQHandler+0x18>)
 8001e4e:	695b      	ldr	r3, [r3, #20]
 8001e50:	4a03      	ldr	r2, [pc, #12]	; (8001e60 <EXTI15_10_IRQHandler+0x18>)
 8001e52:	f043 0301 	orr.w	r3, r3, #1
 8001e56:	6153      	str	r3, [r2, #20]

}
 8001e58:	bf00      	nop
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr
 8001e60:	40010400 	.word	0x40010400

08001e64 <MCAL_UART_INIT>:
 * note -                   -none
 *
 */
/**================================================================= */
void MCAL_UART_INIT(USART_TypeDef* USARTx,USART_Config * UART_Config)
{
 8001e64:	b5b0      	push	{r4, r5, r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]

	uint32_t pclk ,BRR;


	//Enable Clock For Given USART Peripheral
	if(USARTx == USART1)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a68      	ldr	r2, [pc, #416]	; (8002014 <MCAL_UART_INIT+0x1b0>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d10e      	bne.n	8001e94 <MCAL_UART_INIT+0x30>
	{
		RCC_USART1_CLOCK_EN();
 8001e76:	4b68      	ldr	r3, [pc, #416]	; (8002018 <MCAL_UART_INIT+0x1b4>)
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	4a67      	ldr	r2, [pc, #412]	; (8002018 <MCAL_UART_INIT+0x1b4>)
 8001e7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e80:	6193      	str	r3, [r2, #24]
		Global_UART_Config[0] = *UART_Config;
 8001e82:	4a66      	ldr	r2, [pc, #408]	; (800201c <MCAL_UART_INIT+0x1b8>)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	4614      	mov	r4, r2
 8001e88:	461d      	mov	r5, r3
 8001e8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e8e:	682b      	ldr	r3, [r5, #0]
 8001e90:	6023      	str	r3, [r4, #0]
 8001e92:	e026      	b.n	8001ee2 <MCAL_UART_INIT+0x7e>
	}
	else if(USARTx == USART2)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a62      	ldr	r2, [pc, #392]	; (8002020 <MCAL_UART_INIT+0x1bc>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d10f      	bne.n	8001ebc <MCAL_UART_INIT+0x58>
	{
		RCC_USART2_CLOCK_EN();
 8001e9c:	4b5e      	ldr	r3, [pc, #376]	; (8002018 <MCAL_UART_INIT+0x1b4>)
 8001e9e:	69db      	ldr	r3, [r3, #28]
 8001ea0:	4a5d      	ldr	r2, [pc, #372]	; (8002018 <MCAL_UART_INIT+0x1b4>)
 8001ea2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ea6:	61d3      	str	r3, [r2, #28]
		Global_UART_Config[1] = *UART_Config;
 8001ea8:	4b5c      	ldr	r3, [pc, #368]	; (800201c <MCAL_UART_INIT+0x1b8>)
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	f103 0414 	add.w	r4, r3, #20
 8001eb0:	4615      	mov	r5, r2
 8001eb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001eb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001eb6:	682b      	ldr	r3, [r5, #0]
 8001eb8:	6023      	str	r3, [r4, #0]
 8001eba:	e012      	b.n	8001ee2 <MCAL_UART_INIT+0x7e>
	}
	else if(USARTx == USART3)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a59      	ldr	r2, [pc, #356]	; (8002024 <MCAL_UART_INIT+0x1c0>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d10e      	bne.n	8001ee2 <MCAL_UART_INIT+0x7e>
	{
		RCC_USART3_CLOCK_EN();
 8001ec4:	4b54      	ldr	r3, [pc, #336]	; (8002018 <MCAL_UART_INIT+0x1b4>)
 8001ec6:	69db      	ldr	r3, [r3, #28]
 8001ec8:	4a53      	ldr	r2, [pc, #332]	; (8002018 <MCAL_UART_INIT+0x1b4>)
 8001eca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ece:	61d3      	str	r3, [r2, #28]
		Global_UART_Config[2] = *UART_Config;
 8001ed0:	4b52      	ldr	r3, [pc, #328]	; (800201c <MCAL_UART_INIT+0x1b8>)
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8001ed8:	4615      	mov	r5, r2
 8001eda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001edc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ede:	682b      	ldr	r3, [r5, #0]
 8001ee0:	6023      	str	r3, [r4, #0]
	}

	//Enable UART Module Bit 13 UE: USART enable
	USARTx->CR1 |=(1<<13);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	60da      	str	r2, [r3, #12]

	//Enable TX RX according to the USART_MODE configuration item
	USARTx->CR1 |= UART_Config->USART_MODE;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	683a      	ldr	r2, [r7, #0]
 8001ef4:	7812      	ldrb	r2, [r2, #0]
 8001ef6:	431a      	orrs	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	60da      	str	r2, [r3, #12]

	//PayLoad Length
	USARTx->CR1 |=UART_Config->PayLoad_Length;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	7a12      	ldrb	r2, [r2, #8]
 8001f04:	431a      	orrs	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	60da      	str	r2, [r3, #12]

	//Baud Rate
	USARTx->CR1 |=UART_Config->BaudRate;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68da      	ldr	r2, [r3, #12]
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	431a      	orrs	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	60da      	str	r2, [r3, #12]

	//Parity
	USARTx->CR1 |=UART_Config->Parity;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	7a52      	ldrb	r2, [r2, #9]
 8001f20:	431a      	orrs	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	60da      	str	r2, [r3, #12]

	//StopBits
	USARTx->CR1 |=UART_Config->StopBits;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	7a92      	ldrb	r2, [r2, #10]
 8001f2e:	431a      	orrs	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	60da      	str	r2, [r3, #12]

	//HW_FlowCtrl
	USARTx->CR1 |=UART_Config->HW_FlowCtrl;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	7ad2      	ldrb	r2, [r2, #11]
 8001f3c:	431a      	orrs	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	60da      	str	r2, [r3, #12]

	//IRQ_Enable
	USARTx->CR1 |=UART_Config->IRQ_Enable;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	7b12      	ldrb	r2, [r2, #12]
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	60da      	str	r2, [r3, #12]

	/*Configuration of BRR(BaudRate Register)*/
	//PCLK1 for USART2,3
	//PCLK2 for USART1
	if(USARTx == USART1)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a30      	ldr	r2, [pc, #192]	; (8002014 <MCAL_UART_INIT+0x1b0>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d103      	bne.n	8001f60 <MCAL_UART_INIT+0xfc>
	{
		pclk=MCAL_RCC_Get_PCLK2_Freq();
 8001f58:	f000 fb26 	bl	80025a8 <MCAL_RCC_Get_PCLK2_Freq>
 8001f5c:	60f8      	str	r0, [r7, #12]
 8001f5e:	e002      	b.n	8001f66 <MCAL_UART_INIT+0x102>
	}
	else
	{
		pclk=MCAL_RCC_Get_PCLK1_Freq();
 8001f60:	f000 fb0e 	bl	8002580 <MCAL_RCC_Get_PCLK1_Freq>
 8001f64:	60f8      	str	r0, [r7, #12]
	}

	BRR = USART_BRR_REGISTER(pclk,UART_Config->BaudRate);
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	011b      	lsls	r3, r3, #4
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f72:	0119      	lsls	r1, r3, #4
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	4613      	mov	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	4413      	add	r3, r2
 8001f7c:	009a      	lsls	r2, r3, #2
 8001f7e:	441a      	add	r2, r3
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	011b      	lsls	r3, r3, #4
 8001f90:	68f8      	ldr	r0, [r7, #12]
 8001f92:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f96:	2064      	movs	r0, #100	; 0x64
 8001f98:	fb00 f303 	mul.w	r3, r0, r3
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	011b      	lsls	r3, r3, #4
 8001fa0:	4a21      	ldr	r2, [pc, #132]	; (8002028 <MCAL_UART_INIT+0x1c4>)
 8001fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa6:	095b      	lsrs	r3, r3, #5
 8001fa8:	f003 030f 	and.w	r3, r3, #15
 8001fac:	430b      	orrs	r3, r1
 8001fae:	60bb      	str	r3, [r7, #8]
	USARTx->BRR = BRR;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	68ba      	ldr	r2, [r7, #8]
 8001fb4:	609a      	str	r2, [r3, #8]

	/*Enable/Disable interrupt*/
	//USART_CR1
	if( UART_Config->IRQ_Enable != USART_IRQ_Enable_NONE ) //this mean user enable interrupt
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	7b1b      	ldrb	r3, [r3, #12]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d026      	beq.n	800200c <MCAL_UART_INIT+0x1a8>
	{
		USARTx->CR1 |= UART_Config->IRQ_Enable;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	7b12      	ldrb	r2, [r2, #12]
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	60da      	str	r2, [r3, #12]

		//Enable interrupt for NVIC for USARTx IRQ
		if(USARTx == USART1)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a11      	ldr	r2, [pc, #68]	; (8002014 <MCAL_UART_INIT+0x1b0>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d106      	bne.n	8001fe2 <MCAL_UART_INIT+0x17e>
		{
			NVIC_IRQ37_USART1_ENABLE();
 8001fd4:	4b15      	ldr	r3, [pc, #84]	; (800202c <MCAL_UART_INIT+0x1c8>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a14      	ldr	r2, [pc, #80]	; (800202c <MCAL_UART_INIT+0x1c8>)
 8001fda:	f043 0320 	orr.w	r3, r3, #32
 8001fde:	6013      	str	r3, [r2, #0]
			NVIC_IRQ39_USART3_ENABLE();
		}

	}

}
 8001fe0:	e014      	b.n	800200c <MCAL_UART_INIT+0x1a8>
		else if(USARTx == USART2)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a0e      	ldr	r2, [pc, #56]	; (8002020 <MCAL_UART_INIT+0x1bc>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d106      	bne.n	8001ff8 <MCAL_UART_INIT+0x194>
			NVIC_IRQ38_USART2_ENABLE();
 8001fea:	4b10      	ldr	r3, [pc, #64]	; (800202c <MCAL_UART_INIT+0x1c8>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a0f      	ldr	r2, [pc, #60]	; (800202c <MCAL_UART_INIT+0x1c8>)
 8001ff0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ff4:	6013      	str	r3, [r2, #0]
}
 8001ff6:	e009      	b.n	800200c <MCAL_UART_INIT+0x1a8>
		else if(USARTx == USART3)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a0a      	ldr	r2, [pc, #40]	; (8002024 <MCAL_UART_INIT+0x1c0>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d105      	bne.n	800200c <MCAL_UART_INIT+0x1a8>
			NVIC_IRQ39_USART3_ENABLE();
 8002000:	4b0a      	ldr	r3, [pc, #40]	; (800202c <MCAL_UART_INIT+0x1c8>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a09      	ldr	r2, [pc, #36]	; (800202c <MCAL_UART_INIT+0x1c8>)
 8002006:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800200a:	6013      	str	r3, [r2, #0]
}
 800200c:	bf00      	nop
 800200e:	3710      	adds	r7, #16
 8002010:	46bd      	mov	sp, r7
 8002012:	bdb0      	pop	{r4, r5, r7, pc}
 8002014:	40013800 	.word	0x40013800
 8002018:	40021000 	.word	0x40021000
 800201c:	200045b0 	.word	0x200045b0
 8002020:	40004400 	.word	0x40004400
 8002024:	40004800 	.word	0x40004800
 8002028:	51eb851f 	.word	0x51eb851f
 800202c:	e000e104 	.word	0xe000e104

08002030 <Which_UART>:
}

/*
 * This functions is used by uart driver to get the index of the global array for the used instance
 * */
static uint8_t Which_UART(USART_TypeDef* USARTx){
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
	if(USARTx == USART1)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a0b      	ldr	r2, [pc, #44]	; (8002068 <Which_UART+0x38>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d101      	bne.n	8002044 <Which_UART+0x14>
	{
		return 0;
 8002040:	2300      	movs	r3, #0
 8002042:	e00c      	b.n	800205e <Which_UART+0x2e>
	}
	else if(USARTx == USART2)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a09      	ldr	r2, [pc, #36]	; (800206c <Which_UART+0x3c>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d101      	bne.n	8002050 <Which_UART+0x20>
	{
		return 1;
 800204c:	2301      	movs	r3, #1
 800204e:	e006      	b.n	800205e <Which_UART+0x2e>
	}
	else if(USARTx == USART3)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a07      	ldr	r2, [pc, #28]	; (8002070 <Which_UART+0x40>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d101      	bne.n	800205c <Which_UART+0x2c>
	{
		return 3;
 8002058:	2303      	movs	r3, #3
 800205a:	e000      	b.n	800205e <Which_UART+0x2e>
	}
	return 4;		//will cause error for user when he uses wrong address for USARTx
 800205c:	2304      	movs	r3, #4
}
 800205e:	4618      	mov	r0, r3
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr
 8002068:	40013800 	.word	0x40013800
 800206c:	40004400 	.word	0x40004400
 8002070:	40004800 	.word	0x40004800

08002074 <MCAL_UART_SEND_DATA>:
void MCAL_UART_SEND_DATA(USART_TypeDef* USARTx,uint16_t* pTXBuffer,enum PoLLing_Mechnism PollengEn)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	4613      	mov	r3, r2
 8002080:	71fb      	strb	r3, [r7, #7]

	//Wait until TXE flag is set in SR
	if(PollengEn == enable)
 8002082:	79fb      	ldrb	r3, [r7, #7]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d106      	bne.n	8002096 <MCAL_UART_SEND_DATA+0x22>
	{
		while(! (USARTx->SR & (1<<7)) );
 8002088:	bf00      	nop
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002092:	2b00      	cmp	r3, #0
 8002094:	d0f9      	beq.n	800208a <MCAL_UART_SEND_DATA+0x16>
	}

	uint8_t Gindex=Which_UART(USARTx);
 8002096:	68f8      	ldr	r0, [r7, #12]
 8002098:	f7ff ffca 	bl	8002030 <Which_UART>
 800209c:	4603      	mov	r3, r0
 800209e:	75fb      	strb	r3, [r7, #23]
		USARTx->DR = (*pTXBuffer & (uint16_t)0x01FF);
	}
	else
	{
		//If 8Bit
		USARTx->DR = (*pTXBuffer & (uint8_t)0xFF);
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	881b      	ldrh	r3, [r3, #0]
 80020a4:	b2da      	uxtb	r2, r3
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	605a      	str	r2, [r3, #4]
	}



}
 80020aa:	bf00      	nop
 80020ac:	3718      	adds	r7, #24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
	...

080020b4 <MCAL_UART_RECEIVE_DATA>:


void MCAL_UART_RECEIVE_DATA(USART_TypeDef* USARTx,uint16_t* pTXBuffer,enum PoLLing_Mechnism PollengEn)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	4613      	mov	r3, r2
 80020c0:	71fb      	strb	r3, [r7, #7]

	if(PollengEn == enable)
 80020c2:	79fb      	ldrb	r3, [r7, #7]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d106      	bne.n	80020d6 <MCAL_UART_RECEIVE_DATA+0x22>
	{
		//wait till RXNE flag is set in the SR
		while(! (USARTx->SR & (1<<5)) );
 80020c8:	bf00      	nop
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0320 	and.w	r3, r3, #32
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d0f9      	beq.n	80020ca <MCAL_UART_RECEIVE_DATA+0x16>
	}

	//check the USART_PayLoad_Length (9B or 8B)
	uint8_t Gindex=Which_UART(USARTx);
 80020d6:	68f8      	ldr	r0, [r7, #12]
 80020d8:	f7ff ffaa 	bl	8002030 <Which_UART>
 80020dc:	4603      	mov	r3, r0
 80020de:	75fb      	strb	r3, [r7, #23]

	}
	else //8Bit
	{
		//8Bit & no parity
		if(Global_UART_Config[Gindex].Parity == USART_Parity_NONE)
 80020e0:	7dfa      	ldrb	r2, [r7, #23]
 80020e2:	490f      	ldr	r1, [pc, #60]	; (8002120 <MCAL_UART_RECEIVE_DATA+0x6c>)
 80020e4:	4613      	mov	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	4413      	add	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	440b      	add	r3, r1
 80020ee:	3309      	adds	r3, #9
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d107      	bne.n	8002106 <MCAL_UART_RECEIVE_DATA+0x52>
		{
			//no parity so all 8bit consider as data
			*((uint16_t*) pTXBuffer) = (USARTx->DR & (uint8_t)0xFF) ;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	b29a      	uxth	r2, r3
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	801a      	strh	r2, [r3, #0]
			*((uint16_t*)pTXBuffer) = (USARTx->DR & (uint8_t)0x7F);
		}
	}


}
 8002104:	e007      	b.n	8002116 <MCAL_UART_RECEIVE_DATA+0x62>
			*((uint16_t*)pTXBuffer) = (USARTx->DR & (uint8_t)0x7F);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	b29b      	uxth	r3, r3
 800210c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002110:	b29a      	uxth	r2, r3
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	801a      	strh	r2, [r3, #0]
}
 8002116:	bf00      	nop
 8002118:	3718      	adds	r7, #24
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	200045b0 	.word	0x200045b0

08002124 <MCAL_UART_GPIO_Set_Pins>:

void MCAL_UART_GPIO_Set_Pins(USART_TypeDef* USARTx)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
	GPIO_Pin_Configure_t PinCfg;
	if( USARTx == USART1 )
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a67      	ldr	r2, [pc, #412]	; (80022cc <MCAL_UART_GPIO_Set_Pins+0x1a8>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d13f      	bne.n	80021b4 <MCAL_UART_GPIO_Set_Pins+0x90>
		 * PA11 ->CTS
		 * PA12 ->RTS
		 */

		//TX
		PinCfg.GPIO_Pin_Number=GPIO_PIN_9;
 8002134:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002138:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_AF_PP;
 800213a:	2306      	movs	r3, #6
 800213c:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED=GPIO_SPEED_10M;
 800213e:	2301      	movs	r3, #1
 8002140:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8002142:	f107 030c 	add.w	r3, r7, #12
 8002146:	4619      	mov	r1, r3
 8002148:	4861      	ldr	r0, [pc, #388]	; (80022d0 <MCAL_UART_GPIO_Set_Pins+0x1ac>)
 800214a:	f000 f94c 	bl	80023e6 <MCAL_GPIO_Init>

		//RX
		PinCfg.GPIO_Pin_Number=GPIO_PIN_10;
 800214e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002152:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE=GPIO_MODE_AF_INPUT;
 8002154:	2308      	movs	r3, #8
 8002156:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8002158:	f107 030c 	add.w	r3, r7, #12
 800215c:	4619      	mov	r1, r3
 800215e:	485c      	ldr	r0, [pc, #368]	; (80022d0 <MCAL_UART_GPIO_Set_Pins+0x1ac>)
 8002160:	f000 f941 	bl	80023e6 <MCAL_GPIO_Init>

		if (Global_UART_Config[0].HW_FlowCtrl == USART_HW_FlowCtrl_CTS 				||
 8002164:	4b5b      	ldr	r3, [pc, #364]	; (80022d4 <MCAL_UART_GPIO_Set_Pins+0x1b0>)
 8002166:	7adb      	ldrb	r3, [r3, #11]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d003      	beq.n	8002174 <MCAL_UART_GPIO_Set_Pins+0x50>
				Global_UART_Config[0].HW_FlowCtrl == USART_HW_FlowCtrl_CTS_AND_RTS 		)
 800216c:	4b59      	ldr	r3, [pc, #356]	; (80022d4 <MCAL_UART_GPIO_Set_Pins+0x1b0>)
 800216e:	7adb      	ldrb	r3, [r3, #11]
		if (Global_UART_Config[0].HW_FlowCtrl == USART_HW_FlowCtrl_CTS 				||
 8002170:	2b00      	cmp	r3, #0
 8002172:	d10a      	bne.n	800218a <MCAL_UART_GPIO_Set_Pins+0x66>
		{
			PinCfg.GPIO_Pin_Number=GPIO_PIN_11;
 8002174:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002178:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE=GPIO_MODE_INPUT_FLO;
 800217a:	2301      	movs	r3, #1
 800217c:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 800217e:	f107 030c 	add.w	r3, r7, #12
 8002182:	4619      	mov	r1, r3
 8002184:	4852      	ldr	r0, [pc, #328]	; (80022d0 <MCAL_UART_GPIO_Set_Pins+0x1ac>)
 8002186:	f000 f92e 	bl	80023e6 <MCAL_GPIO_Init>
		}

		if (Global_UART_Config[0].HW_FlowCtrl == USART_HW_FlowCtrl_RTS 				||
 800218a:	4b52      	ldr	r3, [pc, #328]	; (80022d4 <MCAL_UART_GPIO_Set_Pins+0x1b0>)
 800218c:	7adb      	ldrb	r3, [r3, #11]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <MCAL_UART_GPIO_Set_Pins+0x76>
				Global_UART_Config[0].HW_FlowCtrl == USART_HW_FlowCtrl_CTS_AND_RTS 		)
 8002192:	4b50      	ldr	r3, [pc, #320]	; (80022d4 <MCAL_UART_GPIO_Set_Pins+0x1b0>)
 8002194:	7adb      	ldrb	r3, [r3, #11]
		if (Global_UART_Config[0].HW_FlowCtrl == USART_HW_FlowCtrl_RTS 				||
 8002196:	2b00      	cmp	r3, #0
 8002198:	d10c      	bne.n	80021b4 <MCAL_UART_GPIO_Set_Pins+0x90>
		{
			PinCfg.GPIO_Pin_Number=GPIO_PIN_12;
 800219a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800219e:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_AF_PP;
 80021a0:	2306      	movs	r3, #6
 80021a2:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_OUTPUT_SPEED=GPIO_SPEED_10M;
 80021a4:	2301      	movs	r3, #1
 80021a6:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 80021a8:	f107 030c 	add.w	r3, r7, #12
 80021ac:	4619      	mov	r1, r3
 80021ae:	4848      	ldr	r0, [pc, #288]	; (80022d0 <MCAL_UART_GPIO_Set_Pins+0x1ac>)
 80021b0:	f000 f919 	bl	80023e6 <MCAL_GPIO_Init>
		}

	}
	if( USARTx == USART2 )
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a48      	ldr	r2, [pc, #288]	; (80022d8 <MCAL_UART_GPIO_Set_Pins+0x1b4>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d13b      	bne.n	8002234 <MCAL_UART_GPIO_Set_Pins+0x110>
		 * PA0 ->CTS
		 * PA1 ->RTS
		 */

		//TX
		PinCfg.GPIO_Pin_Number=GPIO_PIN_2;
 80021bc:	2304      	movs	r3, #4
 80021be:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_AF_PP;
 80021c0:	2306      	movs	r3, #6
 80021c2:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED=GPIO_SPEED_10M;
 80021c4:	2301      	movs	r3, #1
 80021c6:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 80021c8:	f107 030c 	add.w	r3, r7, #12
 80021cc:	4619      	mov	r1, r3
 80021ce:	4840      	ldr	r0, [pc, #256]	; (80022d0 <MCAL_UART_GPIO_Set_Pins+0x1ac>)
 80021d0:	f000 f909 	bl	80023e6 <MCAL_GPIO_Init>

		//RX
		PinCfg.GPIO_Pin_Number=GPIO_PIN_3;
 80021d4:	2308      	movs	r3, #8
 80021d6:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE=GPIO_MODE_AF_INPUT;
 80021d8:	2308      	movs	r3, #8
 80021da:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 80021dc:	f107 030c 	add.w	r3, r7, #12
 80021e0:	4619      	mov	r1, r3
 80021e2:	483b      	ldr	r0, [pc, #236]	; (80022d0 <MCAL_UART_GPIO_Set_Pins+0x1ac>)
 80021e4:	f000 f8ff 	bl	80023e6 <MCAL_GPIO_Init>

		if (Global_UART_Config[1].HW_FlowCtrl == USART_HW_FlowCtrl_CTS 					||
 80021e8:	4b3a      	ldr	r3, [pc, #232]	; (80022d4 <MCAL_UART_GPIO_Set_Pins+0x1b0>)
 80021ea:	7fdb      	ldrb	r3, [r3, #31]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d003      	beq.n	80021f8 <MCAL_UART_GPIO_Set_Pins+0xd4>
				Global_UART_Config[1].HW_FlowCtrl == USART_HW_FlowCtrl_CTS_AND_RTS 			)
 80021f0:	4b38      	ldr	r3, [pc, #224]	; (80022d4 <MCAL_UART_GPIO_Set_Pins+0x1b0>)
 80021f2:	7fdb      	ldrb	r3, [r3, #31]
		if (Global_UART_Config[1].HW_FlowCtrl == USART_HW_FlowCtrl_CTS 					||
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d109      	bne.n	800220c <MCAL_UART_GPIO_Set_Pins+0xe8>
		{
			PinCfg.GPIO_Pin_Number=GPIO_PIN_0;
 80021f8:	2301      	movs	r3, #1
 80021fa:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE=GPIO_MODE_INPUT_FLO;
 80021fc:	2301      	movs	r3, #1
 80021fe:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 8002200:	f107 030c 	add.w	r3, r7, #12
 8002204:	4619      	mov	r1, r3
 8002206:	4832      	ldr	r0, [pc, #200]	; (80022d0 <MCAL_UART_GPIO_Set_Pins+0x1ac>)
 8002208:	f000 f8ed 	bl	80023e6 <MCAL_GPIO_Init>
		}

		if (Global_UART_Config[1].HW_FlowCtrl == USART_HW_FlowCtrl_RTS 					||
 800220c:	4b31      	ldr	r3, [pc, #196]	; (80022d4 <MCAL_UART_GPIO_Set_Pins+0x1b0>)
 800220e:	7fdb      	ldrb	r3, [r3, #31]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d003      	beq.n	800221c <MCAL_UART_GPIO_Set_Pins+0xf8>
				Global_UART_Config[1].HW_FlowCtrl == USART_HW_FlowCtrl_CTS_AND_RTS 		)
 8002214:	4b2f      	ldr	r3, [pc, #188]	; (80022d4 <MCAL_UART_GPIO_Set_Pins+0x1b0>)
 8002216:	7fdb      	ldrb	r3, [r3, #31]
		if (Global_UART_Config[1].HW_FlowCtrl == USART_HW_FlowCtrl_RTS 					||
 8002218:	2b00      	cmp	r3, #0
 800221a:	d10b      	bne.n	8002234 <MCAL_UART_GPIO_Set_Pins+0x110>
		{
			PinCfg.GPIO_Pin_Number=GPIO_PIN_1;
 800221c:	2302      	movs	r3, #2
 800221e:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_AF_PP;
 8002220:	2306      	movs	r3, #6
 8002222:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_OUTPUT_SPEED=GPIO_SPEED_10M;
 8002224:	2301      	movs	r3, #1
 8002226:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 8002228:	f107 030c 	add.w	r3, r7, #12
 800222c:	4619      	mov	r1, r3
 800222e:	4828      	ldr	r0, [pc, #160]	; (80022d0 <MCAL_UART_GPIO_Set_Pins+0x1ac>)
 8002230:	f000 f8d9 	bl	80023e6 <MCAL_GPIO_Init>
		}

	}
	if( USARTx == USART3 )
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a29      	ldr	r2, [pc, #164]	; (80022dc <MCAL_UART_GPIO_Set_Pins+0x1b8>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d143      	bne.n	80022c4 <MCAL_UART_GPIO_Set_Pins+0x1a0>
		 * PB13 ->CTS
		 * PB14 ->RTS
		 */

		//TX
		PinCfg.GPIO_Pin_Number=GPIO_PIN_10;
 800223c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002240:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_AF_PP;
 8002242:	2306      	movs	r3, #6
 8002244:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED=GPIO_SPEED_10M;
 8002246:	2301      	movs	r3, #1
 8002248:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 800224a:	f107 030c 	add.w	r3, r7, #12
 800224e:	4619      	mov	r1, r3
 8002250:	4823      	ldr	r0, [pc, #140]	; (80022e0 <MCAL_UART_GPIO_Set_Pins+0x1bc>)
 8002252:	f000 f8c8 	bl	80023e6 <MCAL_GPIO_Init>

		//RX
		PinCfg.GPIO_Pin_Number=GPIO_PIN_11;
 8002256:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800225a:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE=GPIO_MODE_AF_INPUT;
 800225c:	2308      	movs	r3, #8
 800225e:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8002260:	f107 030c 	add.w	r3, r7, #12
 8002264:	4619      	mov	r1, r3
 8002266:	481e      	ldr	r0, [pc, #120]	; (80022e0 <MCAL_UART_GPIO_Set_Pins+0x1bc>)
 8002268:	f000 f8bd 	bl	80023e6 <MCAL_GPIO_Init>


		if (Global_UART_Config[2].HW_FlowCtrl == USART_HW_FlowCtrl_CTS 					||
 800226c:	4b19      	ldr	r3, [pc, #100]	; (80022d4 <MCAL_UART_GPIO_Set_Pins+0x1b0>)
 800226e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8002272:	2b00      	cmp	r3, #0
 8002274:	d004      	beq.n	8002280 <MCAL_UART_GPIO_Set_Pins+0x15c>
				Global_UART_Config[2].HW_FlowCtrl == USART_HW_FlowCtrl_CTS_AND_RTS 		)
 8002276:	4b17      	ldr	r3, [pc, #92]	; (80022d4 <MCAL_UART_GPIO_Set_Pins+0x1b0>)
 8002278:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
		if (Global_UART_Config[2].HW_FlowCtrl == USART_HW_FlowCtrl_CTS 					||
 800227c:	2b00      	cmp	r3, #0
 800227e:	d10a      	bne.n	8002296 <MCAL_UART_GPIO_Set_Pins+0x172>
		{
			PinCfg.GPIO_Pin_Number=GPIO_PIN_13;
 8002280:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002284:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE =GPIO_MODE_INPUT_FLO;
 8002286:	2301      	movs	r3, #1
 8002288:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &PinCfg);
 800228a:	f107 030c 	add.w	r3, r7, #12
 800228e:	4619      	mov	r1, r3
 8002290:	4813      	ldr	r0, [pc, #76]	; (80022e0 <MCAL_UART_GPIO_Set_Pins+0x1bc>)
 8002292:	f000 f8a8 	bl	80023e6 <MCAL_GPIO_Init>
		}

		if (Global_UART_Config[2].HW_FlowCtrl == USART_HW_FlowCtrl_RTS 					||
 8002296:	4b0f      	ldr	r3, [pc, #60]	; (80022d4 <MCAL_UART_GPIO_Set_Pins+0x1b0>)
 8002298:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800229c:	2b00      	cmp	r3, #0
 800229e:	d004      	beq.n	80022aa <MCAL_UART_GPIO_Set_Pins+0x186>
				Global_UART_Config[2].HW_FlowCtrl == USART_HW_FlowCtrl_CTS_AND_RTS 			)
 80022a0:	4b0c      	ldr	r3, [pc, #48]	; (80022d4 <MCAL_UART_GPIO_Set_Pins+0x1b0>)
 80022a2:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
		if (Global_UART_Config[2].HW_FlowCtrl == USART_HW_FlowCtrl_RTS 					||
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10c      	bne.n	80022c4 <MCAL_UART_GPIO_Set_Pins+0x1a0>
		{
			PinCfg.GPIO_Pin_Number=GPIO_PIN_14;
 80022aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022ae:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_AF_PP;
 80022b0:	2306      	movs	r3, #6
 80022b2:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_OUTPUT_SPEED=GPIO_SPEED_10M;
 80022b4:	2301      	movs	r3, #1
 80022b6:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &PinCfg);
 80022b8:	f107 030c 	add.w	r3, r7, #12
 80022bc:	4619      	mov	r1, r3
 80022be:	4808      	ldr	r0, [pc, #32]	; (80022e0 <MCAL_UART_GPIO_Set_Pins+0x1bc>)
 80022c0:	f000 f891 	bl	80023e6 <MCAL_GPIO_Init>
		}

	}
}
 80022c4:	bf00      	nop
 80022c6:	3710      	adds	r7, #16
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40013800 	.word	0x40013800
 80022d0:	40010800 	.word	0x40010800
 80022d4:	200045b0 	.word	0x200045b0
 80022d8:	40004400 	.word	0x40004400
 80022dc:	40004800 	.word	0x40004800
 80022e0:	40010c00 	.word	0x40010c00

080022e4 <USART1_IRQHandler>:



//ISR
void USART1_IRQHandler(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
	Global_UART_Config[0].P_IRQ_Call_Back ();
 80022e8:	4b02      	ldr	r3, [pc, #8]	; (80022f4 <USART1_IRQHandler+0x10>)
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	4798      	blx	r3

}
 80022ee:	bf00      	nop
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	200045b0 	.word	0x200045b0

080022f8 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
	Global_UART_Config[1].P_IRQ_Call_Back ();
 80022fc:	4b02      	ldr	r3, [pc, #8]	; (8002308 <USART2_IRQHandler+0x10>)
 80022fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002300:	4798      	blx	r3

}
 8002302:	bf00      	nop
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	200045b0 	.word	0x200045b0

0800230c <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
	Global_UART_Config[2].P_IRQ_Call_Back ();
 8002310:	4b02      	ldr	r3, [pc, #8]	; (800231c <USART3_IRQHandler+0x10>)
 8002312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002314:	4798      	blx	r3

}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	200045b0 	.word	0x200045b0

08002320 <Get_CRLH_Postion>:

#include "STM32F103C6_GPIO_DRIVERS.h"


uint8_t Get_CRLH_Postion(uint16_t PinNumber)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	4603      	mov	r3, r0
 8002328:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 800232a:	88fb      	ldrh	r3, [r7, #6]
 800232c:	2b80      	cmp	r3, #128	; 0x80
 800232e:	d042      	beq.n	80023b6 <Get_CRLH_Postion+0x96>
 8002330:	2b80      	cmp	r3, #128	; 0x80
 8002332:	dc11      	bgt.n	8002358 <Get_CRLH_Postion+0x38>
 8002334:	2b08      	cmp	r3, #8
 8002336:	d036      	beq.n	80023a6 <Get_CRLH_Postion+0x86>
 8002338:	2b08      	cmp	r3, #8
 800233a:	dc06      	bgt.n	800234a <Get_CRLH_Postion+0x2a>
 800233c:	2b02      	cmp	r3, #2
 800233e:	d02e      	beq.n	800239e <Get_CRLH_Postion+0x7e>
 8002340:	2b04      	cmp	r3, #4
 8002342:	d02e      	beq.n	80023a2 <Get_CRLH_Postion+0x82>
 8002344:	2b01      	cmp	r3, #1
 8002346:	d028      	beq.n	800239a <Get_CRLH_Postion+0x7a>
 8002348:	e047      	b.n	80023da <Get_CRLH_Postion+0xba>
 800234a:	2b20      	cmp	r3, #32
 800234c:	d02f      	beq.n	80023ae <Get_CRLH_Postion+0x8e>
 800234e:	2b40      	cmp	r3, #64	; 0x40
 8002350:	d02f      	beq.n	80023b2 <Get_CRLH_Postion+0x92>
 8002352:	2b10      	cmp	r3, #16
 8002354:	d029      	beq.n	80023aa <Get_CRLH_Postion+0x8a>
 8002356:	e040      	b.n	80023da <Get_CRLH_Postion+0xba>
 8002358:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800235c:	d033      	beq.n	80023c6 <Get_CRLH_Postion+0xa6>
 800235e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002362:	dc09      	bgt.n	8002378 <Get_CRLH_Postion+0x58>
 8002364:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002368:	d029      	beq.n	80023be <Get_CRLH_Postion+0x9e>
 800236a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800236e:	d028      	beq.n	80023c2 <Get_CRLH_Postion+0xa2>
 8002370:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002374:	d021      	beq.n	80023ba <Get_CRLH_Postion+0x9a>
 8002376:	e030      	b.n	80023da <Get_CRLH_Postion+0xba>
 8002378:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800237c:	d027      	beq.n	80023ce <Get_CRLH_Postion+0xae>
 800237e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002382:	dc03      	bgt.n	800238c <Get_CRLH_Postion+0x6c>
 8002384:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002388:	d01f      	beq.n	80023ca <Get_CRLH_Postion+0xaa>
 800238a:	e026      	b.n	80023da <Get_CRLH_Postion+0xba>
 800238c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002390:	d01f      	beq.n	80023d2 <Get_CRLH_Postion+0xb2>
 8002392:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002396:	d01e      	beq.n	80023d6 <Get_CRLH_Postion+0xb6>
 8002398:	e01f      	b.n	80023da <Get_CRLH_Postion+0xba>
	{
	case GPIO_PIN_0:
		return 0;
 800239a:	2300      	movs	r3, #0
 800239c:	e01e      	b.n	80023dc <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_1:
		return 4;
 800239e:	2304      	movs	r3, #4
 80023a0:	e01c      	b.n	80023dc <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_2:
		return 8;
 80023a2:	2308      	movs	r3, #8
 80023a4:	e01a      	b.n	80023dc <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_3:
		return 12;
 80023a6:	230c      	movs	r3, #12
 80023a8:	e018      	b.n	80023dc <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_4:
		return 16;
 80023aa:	2310      	movs	r3, #16
 80023ac:	e016      	b.n	80023dc <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_5:
		return 20;
 80023ae:	2314      	movs	r3, #20
 80023b0:	e014      	b.n	80023dc <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_6:
		return 24;
 80023b2:	2318      	movs	r3, #24
 80023b4:	e012      	b.n	80023dc <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_7:
		return 28;
 80023b6:	231c      	movs	r3, #28
 80023b8:	e010      	b.n	80023dc <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_8:
		return 0;
 80023ba:	2300      	movs	r3, #0
 80023bc:	e00e      	b.n	80023dc <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_9:
		return 4;
 80023be:	2304      	movs	r3, #4
 80023c0:	e00c      	b.n	80023dc <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_10:
		return 8;
 80023c2:	2308      	movs	r3, #8
 80023c4:	e00a      	b.n	80023dc <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_11:
		return 12;
 80023c6:	230c      	movs	r3, #12
 80023c8:	e008      	b.n	80023dc <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_12:
		return 16;
 80023ca:	2310      	movs	r3, #16
 80023cc:	e006      	b.n	80023dc <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_13:
		return 20;
 80023ce:	2314      	movs	r3, #20
 80023d0:	e004      	b.n	80023dc <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_14:
		return 24;
 80023d2:	2318      	movs	r3, #24
 80023d4:	e002      	b.n	80023dc <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_15:
		return 28;
 80023d6:	231c      	movs	r3, #28
 80023d8:	e000      	b.n	80023dc <Get_CRLH_Postion+0xbc>
		break;
	default:
		return 0;
 80023da:	2300      	movs	r3, #0
		break;

	}
}
 80023dc:	4618      	mov	r0, r3
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bc80      	pop	{r7}
 80023e4:	4770      	bx	lr

080023e6 <MCAL_GPIO_Init>:
 * note -                   -stmf103c6 MCU has GPIO A,B,C,D,E Modules
 *                           but LQFP48 Package has only GPIO A,B, Part of C/D exported external pins
 */
/**================================================================= */
void MCAL_GPIO_Init( GPIO_TypeDef *GPIOx , GPIO_Pin_Configure_t *Pin_Config )
{
 80023e6:	b590      	push	{r4, r7, lr}
 80023e8:	b085      	sub	sp, #20
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
 80023ee:	6039      	str	r1, [r7, #0]

	//To Init Any Pins Must Write On Port configuration register low (GPIOx_CRL) 0>>>7
	//Or register low (GPIOx_CRH) 8>>>15
	//We Determine The Position Should Write On It In  configuration register By Determine First Position Pin

	volatile uint32_t *ConfigureRegister = NULL;
 80023f0:	2300      	movs	r3, #0
 80023f2:	60bb      	str	r3, [r7, #8]
	uint8_t   ConfigurePin=0;     //In This Variable We Store The Configure Pin
 80023f4:	2300      	movs	r3, #0
 80023f6:	73fb      	strb	r3, [r7, #15]

	ConfigureRegister = (Pin_Config->GPIO_Pin_Number < GPIO_PIN_8)? &GPIOx->CRL : &GPIOx->CRH ;
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	881b      	ldrh	r3, [r3, #0]
 80023fc:	2bff      	cmp	r3, #255	; 0xff
 80023fe:	d801      	bhi.n	8002404 <MCAL_GPIO_Init+0x1e>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	e001      	b.n	8002408 <MCAL_GPIO_Init+0x22>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3304      	adds	r3, #4
 8002408:	60bb      	str	r3, [r7, #8]
	//Clear CNF & MODE
	*(ConfigureRegister) &=~(0xf<<Get_CRLH_Postion(Pin_Config->GPIO_Pin_Number));
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	881b      	ldrh	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	f7ff ff86 	bl	8002320 <Get_CRLH_Postion>
 8002414:	4603      	mov	r3, r0
 8002416:	461a      	mov	r2, r3
 8002418:	230f      	movs	r3, #15
 800241a:	4093      	lsls	r3, r2
 800241c:	43da      	mvns	r2, r3
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	401a      	ands	r2, r3
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	601a      	str	r2, [r3, #0]

	if (Pin_Config->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD || Pin_Config->GPIO_MODE ==GPIO_MODE_OUTPUT_AF_PP || Pin_Config->GPIO_MODE ==GPIO_MODE_OUTPUT_OD || Pin_Config->GPIO_MODE ==GPIO_MODE_OUTPUT_PP)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	789b      	ldrb	r3, [r3, #2]
 800242c:	2b07      	cmp	r3, #7
 800242e:	d00b      	beq.n	8002448 <MCAL_GPIO_Init+0x62>
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	789b      	ldrb	r3, [r3, #2]
 8002434:	2b06      	cmp	r3, #6
 8002436:	d007      	beq.n	8002448 <MCAL_GPIO_Init+0x62>
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	789b      	ldrb	r3, [r3, #2]
 800243c:	2b05      	cmp	r3, #5
 800243e:	d003      	beq.n	8002448 <MCAL_GPIO_Init+0x62>
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	789b      	ldrb	r3, [r3, #2]
 8002444:	2b04      	cmp	r3, #4
 8002446:	d10e      	bne.n	8002466 <MCAL_GPIO_Init+0x80>
	{

		//I sure The User Want Make The Pin As Output & in Case Output Should Configure Mode(Speed) & CNF(State)
		ConfigurePin = ((( (Pin_Config->GPIO_MODE - 4)<<2) |(Pin_Config->GPIO_OUTPUT_SPEED)) & 0x0f); //Shift 2 to Set The CNF Bits
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	789b      	ldrb	r3, [r3, #2]
 800244c:	3b04      	subs	r3, #4
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	b25a      	sxtb	r2, r3
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	78db      	ldrb	r3, [r3, #3]
 8002456:	b25b      	sxtb	r3, r3
 8002458:	4313      	orrs	r3, r2
 800245a:	b25b      	sxtb	r3, r3
 800245c:	b2db      	uxtb	r3, r3
 800245e:	f003 030f 	and.w	r3, r3, #15
 8002462:	73fb      	strb	r3, [r7, #15]
 8002464:	e028      	b.n	80024b8 <MCAL_GPIO_Init+0xd2>

	}

	else  //I sure The User Want Make The Pin As Input & in Case input Should Configure Mode(Speed)=00 & CNF(State)
	{
		if(Pin_Config->GPIO_MODE == GPIO_MODE_INPUT_FLO || GPIO_MODE_Analog)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	789b      	ldrb	r3, [r3, #2]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d107      	bne.n	800247e <MCAL_GPIO_Init+0x98>
		{
			ConfigurePin = (( ( (Pin_Config->GPIO_MODE) <<2) | 0x0) & 0x0F);      //Shift 2 to Set The CNF Bits
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	789b      	ldrb	r3, [r3, #2]
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	b2db      	uxtb	r3, r3
 8002476:	f003 030f 	and.w	r3, r3, #15
 800247a:	73fb      	strb	r3, [r7, #15]
 800247c:	e01c      	b.n	80024b8 <MCAL_GPIO_Init+0xd2>
		}

		else if(Pin_Config->GPIO_MODE == GPIO_MODE_AF_INPUT)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	789b      	ldrb	r3, [r3, #2]
 8002482:	2b08      	cmp	r3, #8
 8002484:	d102      	bne.n	800248c <MCAL_GPIO_Init+0xa6>
		{
			ConfigurePin = (( ( (GPIO_MODE_INPUT_FLO) <<2) | 0x0) & 0x0f);      //Shift 2 to Set The CNF Bits
 8002486:	2304      	movs	r3, #4
 8002488:	73fb      	strb	r3, [r7, #15]
 800248a:	e015      	b.n	80024b8 <MCAL_GPIO_Init+0xd2>
		}
		else  //PullUp Or PullDown
		{
			ConfigurePin = ( (((GPIO_MODE_INPUT_PU)<<2  ) |  0x0) & 0x0f);
 800248c:	2308      	movs	r3, #8
 800248e:	73fb      	strb	r3, [r7, #15]
			// 20. Port bit configuration table
			/*In Case GPIO_MODE_INPUT_PU OR GPIO_MODE_INPUT_PD We Put The Same Value 10 In CNF
			And Go To ODR IF GPIO_MODE_INPUT_PU Put 1 And If GPIO_MODE_INPUT_PD Put In ODR 0 Shifting By Bin Number*/
			if(Pin_Config->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	789b      	ldrb	r3, [r3, #2]
 8002494:	2b02      	cmp	r3, #2
 8002496:	d107      	bne.n	80024a8 <MCAL_GPIO_Init+0xc2>
			{
				GPIOx->ODR |=(Pin_Config->GPIO_Pin_Number); //Not Making Shifting because The Pin Number Already Shifted in Header
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	8812      	ldrh	r2, [r2, #0]
 80024a0:	431a      	orrs	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	60da      	str	r2, [r3, #12]
 80024a6:	e007      	b.n	80024b8 <MCAL_GPIO_Init+0xd2>
			}
			else //GPIO_MODE_INPUT_PD
			{
				GPIOx->ODR &=~(Pin_Config->GPIO_Pin_Number);//Not Making Shifting because The Pin Number Already Shifted in Header
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	8812      	ldrh	r2, [r2, #0]
 80024b0:	43d2      	mvns	r2, r2
 80024b2:	401a      	ands	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	60da      	str	r2, [r3, #12]
			}
		}
	}
	//Write On CRH Or CLH
	*(ConfigureRegister) |=( ConfigurePin << Get_CRLH_Postion(Pin_Config->GPIO_Pin_Number) );
 80024b8:	7bfc      	ldrb	r4, [r7, #15]
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	881b      	ldrh	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff ff2e 	bl	8002320 <Get_CRLH_Postion>
 80024c4:	4603      	mov	r3, r0
 80024c6:	fa04 f203 	lsl.w	r2, r4, r3
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	431a      	orrs	r2, r3
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	601a      	str	r2, [r3, #0]
}
 80024d4:	bf00      	nop
 80024d6:	3714      	adds	r7, #20
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd90      	pop	{r4, r7, pc}

080024dc <MCAL_GPIO_WritePin>:
 * @retval -                -the input pin value (tow values based on @ref GPIO_PIN_State)
 * note -                   -none
 */
/**================================================================= */
void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx , uint16_t Pin_Number , uint8_t Value)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	460b      	mov	r3, r1
 80024e6:	807b      	strh	r3, [r7, #2]
 80024e8:	4613      	mov	r3, r2
 80024ea:	707b      	strb	r3, [r7, #1]
	if(Value != GPIO_PIN_FALSE )
 80024ec:	787b      	ldrb	r3, [r7, #1]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d006      	beq.n	8002500 <MCAL_GPIO_WritePin+0x24>
	{
		GPIOx->ODR |=(uint32_t) (Pin_Number);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	68da      	ldr	r2, [r3, #12]
 80024f6:	887b      	ldrh	r3, [r7, #2]
 80024f8:	431a      	orrs	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	60da      	str	r2, [r3, #12]
	}
	else
	{
		GPIOx->ODR &=~(uint32_t)(Pin_Number);
	}
}
 80024fe:	e006      	b.n	800250e <MCAL_GPIO_WritePin+0x32>
		GPIOx->ODR &=~(uint32_t)(Pin_Number);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68da      	ldr	r2, [r3, #12]
 8002504:	887b      	ldrh	r3, [r7, #2]
 8002506:	43db      	mvns	r3, r3
 8002508:	401a      	ands	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	60da      	str	r2, [r3, #12]
}
 800250e:	bf00      	nop
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	bc80      	pop	{r7}
 8002516:	4770      	bx	lr

08002518 <MCAL_RCC_Get_SYS_CLKFreq>:
	1111: SYSCLK divided by 512*/
const uint8_t AHBPrescTable[16] = {0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8};


uint32_t MCAL_RCC_Get_SYS_CLKFreq(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
	00: HSI selected as system clock
	01: HSE selected as system clock
	10: PLL selected as system clock
	11: not allowed*/

	switch( (RCC->CFGR >>2) & 0b11 )
 800251c:	4b0b      	ldr	r3, [pc, #44]	; (800254c <MCAL_RCC_Get_SYS_CLKFreq+0x34>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	089b      	lsrs	r3, r3, #2
 8002522:	f003 0303 	and.w	r3, r3, #3
 8002526:	2b01      	cmp	r3, #1
 8002528:	d00a      	beq.n	8002540 <MCAL_RCC_Get_SYS_CLKFreq+0x28>
 800252a:	2b01      	cmp	r3, #1
 800252c:	d302      	bcc.n	8002534 <MCAL_RCC_Get_SYS_CLKFreq+0x1c>
 800252e:	2b0a      	cmp	r3, #10
 8002530:	d002      	beq.n	8002538 <MCAL_RCC_Get_SYS_CLKFreq+0x20>
 8002532:	e003      	b.n	800253c <MCAL_RCC_Get_SYS_CLKFreq+0x24>
	{

	case 00:
		return HSI_RC_CLK;
 8002534:	4b06      	ldr	r3, [pc, #24]	; (8002550 <MCAL_RCC_Get_SYS_CLKFreq+0x38>)
 8002536:	e005      	b.n	8002544 <MCAL_RCC_Get_SYS_CLKFreq+0x2c>
		//return HSE_CLK;
		break;

	case 10:
		//to do calc it HSE PLLCLK & PLLMULL & PLL source Mux
		return 16000000;
 8002538:	4b06      	ldr	r3, [pc, #24]	; (8002554 <MCAL_RCC_Get_SYS_CLKFreq+0x3c>)
 800253a:	e003      	b.n	8002544 <MCAL_RCC_Get_SYS_CLKFreq+0x2c>
		break;

	default:
		return 0;
 800253c:	2300      	movs	r3, #0
 800253e:	e001      	b.n	8002544 <MCAL_RCC_Get_SYS_CLKFreq+0x2c>
		break;
 8002540:	bf00      	nop
		break;

	}
	return 0;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr
 800254c:	40021000 	.word	0x40021000
 8002550:	007a1200 	.word	0x007a1200
 8002554:	00f42400 	.word	0x00f42400

08002558 <MCAL_RCC_Get_HCLK_Freq>:


uint32_t MCAL_RCC_Get_HCLK_Freq(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
	1011: SYSCLK divided by 16
	1100: SYSCLK divided by 64
	1101: SYSCLK divided by 128
	1110: SYSCLK divided by 256
	1111: SYSCLK divided by 512*/
	return MCAL_RCC_Get_SYS_CLKFreq() >> AHBPrescTable[( (RCC->CFGR >> 7) & 0b1111) ];/*(( RCC->CFGR >>8) & 0b1111) This Is
 800255c:	f7ff ffdc 	bl	8002518 <MCAL_RCC_Get_SYS_CLKFreq>
 8002560:	4601      	mov	r1, r0
 8002562:	4b05      	ldr	r3, [pc, #20]	; (8002578 <MCAL_RCC_Get_HCLK_Freq+0x20>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	09db      	lsrs	r3, r3, #7
 8002568:	f003 030f 	and.w	r3, r3, #15
 800256c:	4a03      	ldr	r2, [pc, #12]	; (800257c <MCAL_RCC_Get_HCLK_Freq+0x24>)
 800256e:	5cd3      	ldrb	r3, [r2, r3]
 8002570:	fa21 f303 	lsr.w	r3, r1, r3
	                                                      Read Value of AHB  prescaler To Determine index On 2d Upper Array */


}
 8002574:	4618      	mov	r0, r3
 8002576:	bd80      	pop	{r7, pc}
 8002578:	40021000 	.word	0x40021000
 800257c:	08002b94 	.word	0x08002b94

08002580 <MCAL_RCC_Get_PCLK1_Freq>:



uint32_t MCAL_RCC_Get_PCLK1_Freq(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
	100: HCLK divided by 2
	101: HCLK divided by 4
	110: HCLK divided by 8
	111: HCLK divided by 16*/

	return ( MCAL_RCC_Get_HCLK_Freq() >> APBPrescTable[ (( RCC->CFGR >>8) & 0b111) ] ); /*(( RCC->CFGR >>8) & 0b111) This Is
 8002584:	f7ff ffe8 	bl	8002558 <MCAL_RCC_Get_HCLK_Freq>
 8002588:	4601      	mov	r1, r0
 800258a:	4b05      	ldr	r3, [pc, #20]	; (80025a0 <MCAL_RCC_Get_PCLK1_Freq+0x20>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	0a1b      	lsrs	r3, r3, #8
 8002590:	f003 0307 	and.w	r3, r3, #7
 8002594:	4a03      	ldr	r2, [pc, #12]	; (80025a4 <MCAL_RCC_Get_PCLK1_Freq+0x24>)
 8002596:	5cd3      	ldrb	r3, [r2, r3]
 8002598:	fa21 f303 	lsr.w	r3, r1, r3
	                                                      Read Value of  PPRE1 prescaler To Determine index On Upper Array */

}
 800259c:	4618      	mov	r0, r3
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40021000 	.word	0x40021000
 80025a4:	08002b8c 	.word	0x08002b8c

080025a8 <MCAL_RCC_Get_PCLK2_Freq>:


uint32_t MCAL_RCC_Get_PCLK2_Freq(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
	100: HCLK divided by 2
	101: HCLK divided by 4
	110: HCLK divided by 8
	111: HCLK divided by 16*/

	return (MCAL_RCC_Get_HCLK_Freq() >> (APBPrescTable[( (RCC->CFGR >>11) & 0b111 )])); /*(( RCC->CFGR >>11) & 0b111) This Is
 80025ac:	f7ff ffd4 	bl	8002558 <MCAL_RCC_Get_HCLK_Freq>
 80025b0:	4601      	mov	r1, r0
 80025b2:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <MCAL_RCC_Get_PCLK2_Freq+0x20>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	0adb      	lsrs	r3, r3, #11
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	4a03      	ldr	r2, [pc, #12]	; (80025cc <MCAL_RCC_Get_PCLK2_Freq+0x24>)
 80025be:	5cd3      	ldrb	r3, [r2, r3]
 80025c0:	fa21 f303 	lsr.w	r3, r1, r3
	                                                      Read Value of  PPRE2 prescaler To Determine index On Upper Array */

}
 80025c4:	4618      	mov	r0, r3
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40021000 	.word	0x40021000
 80025cc:	08002b8c 	.word	0x08002b8c

080025d0 <Timer2_init>:
//we need move the delay function from timer2 to timer1 to relase timer2 for RTOS
/*==============================APIs================================*/

/*========================Timer2 For Delay========================*/
void Timer2_init(void)//for delay
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
	RCC_APB1ENR |=(1<<0);     //Enable Rcc for tim2
 80025d4:	4b0e      	ldr	r3, [pc, #56]	; (8002610 <Timer2_init+0x40>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a0d      	ldr	r2, [pc, #52]	; (8002610 <Timer2_init+0x40>)
 80025da:	f043 0301 	orr.w	r3, r3, #1
 80025de:	6013      	str	r3, [r2, #0]
	TIM2_PSC = 7;             //Clk_input=(8M/(7+1))=1MHZ
 80025e0:	4b0c      	ldr	r3, [pc, #48]	; (8002614 <Timer2_init+0x44>)
 80025e2:	2207      	movs	r2, #7
 80025e4:	601a      	str	r2, [r3, #0]
	TIM2_ARR = 0xFFFF;        //to make interrupt after 50000 tike(50000*10^-6)=0.05-->20*0.05=1
 80025e6:	4b0c      	ldr	r3, [pc, #48]	; (8002618 <Timer2_init+0x48>)
 80025e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025ec:	601a      	str	r2, [r3, #0]
	TIM2_CR1 |=(1<<0);
 80025ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80025f8:	f043 0301 	orr.w	r3, r3, #1
 80025fc:	6013      	str	r3, [r2, #0]
	while(!(TIM2_SR)&(1<<0));
 80025fe:	bf00      	nop
 8002600:	4b06      	ldr	r3, [pc, #24]	; (800261c <Timer2_init+0x4c>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d0fb      	beq.n	8002600 <Timer2_init+0x30>
}
 8002608:	bf00      	nop
 800260a:	46bd      	mov	sp, r7
 800260c:	bc80      	pop	{r7}
 800260e:	4770      	bx	lr
 8002610:	4002101c 	.word	0x4002101c
 8002614:	40000028 	.word	0x40000028
 8002618:	4000002c 	.word	0x4000002c
 800261c:	40000010 	.word	0x40000010

08002620 <dus>:

void dus(int us)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
	TIM2_CNT=0;
 8002628:	4b06      	ldr	r3, [pc, #24]	; (8002644 <dus+0x24>)
 800262a:	2200      	movs	r2, #0
 800262c:	601a      	str	r2, [r3, #0]
	while(TIM2_CNT<us);
 800262e:	bf00      	nop
 8002630:	4b04      	ldr	r3, [pc, #16]	; (8002644 <dus+0x24>)
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	429a      	cmp	r2, r3
 8002638:	d3fa      	bcc.n	8002630 <dus+0x10>
}
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	bc80      	pop	{r7}
 8002642:	4770      	bx	lr
 8002644:	40000024 	.word	0x40000024

08002648 <dms>:

void dms(int ms)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
	int i=0;
 8002650:	2300      	movs	r3, #0
 8002652:	60fb      	str	r3, [r7, #12]
	for(i=0;i<ms;i++)
 8002654:	2300      	movs	r3, #0
 8002656:	60fb      	str	r3, [r7, #12]
 8002658:	e006      	b.n	8002668 <dms+0x20>
	{
		dus(1000);
 800265a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800265e:	f7ff ffdf 	bl	8002620 <dus>
	for(i=0;i<ms;i++)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	3301      	adds	r3, #1
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	429a      	cmp	r2, r3
 800266e:	dbf4      	blt.n	800265a <dms+0x12>
	}
}
 8002670:	bf00      	nop
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <Timer3_init>:
/*==================================================================*/


/*==================================================================*/
void Timer3_init(void) //ulter
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
	RCC_APB1ENR |=(1<<1);    //Enable Rcc for tim1
 800267c:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <Timer3_init+0x34>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a0a      	ldr	r2, [pc, #40]	; (80026ac <Timer3_init+0x34>)
 8002682:	f043 0302 	orr.w	r3, r3, #2
 8002686:	6013      	str	r3, [r2, #0]
	TIM3_PSC = 7;            //Clk_input=(8M/(7+1))=1MHZ
 8002688:	4b09      	ldr	r3, [pc, #36]	; (80026b0 <Timer3_init+0x38>)
 800268a:	2207      	movs	r2, #7
 800268c:	601a      	str	r2, [r3, #0]
	TIM3_ARR = 0xFFFF;        //to make interrupt after 50000 tike(50000*10^-6)=0.05-->20*0.05=1
 800268e:	4b09      	ldr	r3, [pc, #36]	; (80026b4 <Timer3_init+0x3c>)
 8002690:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002694:	601a      	str	r2, [r3, #0]
	TIM3_CR1 |=(1<<0);
 8002696:	4b08      	ldr	r3, [pc, #32]	; (80026b8 <Timer3_init+0x40>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a07      	ldr	r2, [pc, #28]	; (80026b8 <Timer3_init+0x40>)
 800269c:	f043 0301 	orr.w	r3, r3, #1
 80026a0:	6013      	str	r3, [r2, #0]
}
 80026a2:	bf00      	nop
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bc80      	pop	{r7}
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	4002101c 	.word	0x4002101c
 80026b0:	40000428 	.word	0x40000428
 80026b4:	4000042c 	.word	0x4000042c
 80026b8:	40000400 	.word	0x40000400

080026bc <Timer1_Init_PWM>:
/*===================PWM=============================*/
//Table 46. TIM1 alternate function remapping

/* The reference PWM signal OCxREF is high as long as TIMx_CNT < TIMx_CCRx else it becomes low*/
void Timer1_Init_PWM(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
	/*GPIO Configuration */
	//TIM1_CH1 PA8
	GPIO_Pin_Configure_t PinCfg;
	//PA8 CH1 PWM1
	PinCfg.GPIO_Pin_Number=GPIO_PIN_8;
 80026c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026c6:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_AF_PP;
 80026c8:	2306      	movs	r3, #6
 80026ca:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_OUTPUT_SPEED=GPIO_SPEED_10M;
 80026cc:	2301      	movs	r3, #1
 80026ce:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOA, &PinCfg);
 80026d0:	1d3b      	adds	r3, r7, #4
 80026d2:	4619      	mov	r1, r3
 80026d4:	482a      	ldr	r0, [pc, #168]	; (8002780 <Timer1_Init_PWM+0xc4>)
 80026d6:	f7ff fe86 	bl	80023e6 <MCAL_GPIO_Init>

	//A11 CH4 PWM2
	PinCfg.GPIO_Pin_Number=GPIO_PIN_11;
 80026da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80026de:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE=GPIO_MODE_OUTPUT_AF_PP;
 80026e0:	2306      	movs	r3, #6
 80026e2:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_OUTPUT_SPEED=GPIO_SPEED_10M;
 80026e4:	2301      	movs	r3, #1
 80026e6:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOA, &PinCfg);
 80026e8:	1d3b      	adds	r3, r7, #4
 80026ea:	4619      	mov	r1, r3
 80026ec:	4824      	ldr	r0, [pc, #144]	; (8002780 <Timer1_Init_PWM+0xc4>)
 80026ee:	f7ff fe7a 	bl	80023e6 <MCAL_GPIO_Init>


	/*Timer1 Configuration*/
	//Bit 11 TIM1EN: TIM1 timer clock enable
	RCC_APB2ENR |=(1<<11);
 80026f2:	4b24      	ldr	r3, [pc, #144]	; (8002784 <Timer1_Init_PWM+0xc8>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a23      	ldr	r2, [pc, #140]	; (8002784 <Timer1_Init_PWM+0xc8>)
 80026f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026fc:	6013      	str	r3, [r2, #0]

	//Bit 7 ARPE: Auto-reload preload enable
	TIM1_CR1 |=(1<<7);
 80026fe:	4b22      	ldr	r3, [pc, #136]	; (8002788 <Timer1_Init_PWM+0xcc>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a21      	ldr	r2, [pc, #132]	; (8002788 <Timer1_Init_PWM+0xcc>)
 8002704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002708:	6013      	str	r3, [r2, #0]

	//Upcounting is active when the DIR bit in the TIMx_CR1 register is low
	//Bit 4 DIR: Direction
	TIM1_CR1 &=~(1<<4);
 800270a:	4b1f      	ldr	r3, [pc, #124]	; (8002788 <Timer1_Init_PWM+0xcc>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a1e      	ldr	r2, [pc, #120]	; (8002788 <Timer1_Init_PWM+0xcc>)
 8002710:	f023 0310 	bic.w	r3, r3, #16
 8002714:	6013      	str	r3, [r2, #0]

	TIM1_PSC=3;
 8002716:	4b1d      	ldr	r3, [pc, #116]	; (800278c <Timer1_Init_PWM+0xd0>)
 8002718:	2203      	movs	r2, #3
 800271a:	601a      	str	r2, [r3, #0]

	//allows generating a signal with a frequency determined by the value of the TIMx_ARR register
	TIM1_ARR = 0xC350;
 800271c:	4b1c      	ldr	r3, [pc, #112]	; (8002790 <Timer1_Init_PWM+0xd4>)
 800271e:	f24c 3250 	movw	r2, #50000	; 0xc350
 8002722:	601a      	str	r2, [r3, #0]


	/*=========================Channel 1 ==============================*/
	//Bits 6:4 OC1M: Output Compare 1 mode
	//110: PWM mode 1 - In upcounting, channel 1 is active as long as TIMx_CNT<TIMx_CCR1
	TIM1_CCMR1 |=(0b110<<4);
 8002724:	4b1b      	ldr	r3, [pc, #108]	; (8002794 <Timer1_Init_PWM+0xd8>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a1a      	ldr	r2, [pc, #104]	; (8002794 <Timer1_Init_PWM+0xd8>)
 800272a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800272e:	6013      	str	r3, [r2, #0]

	/*The corresponding preload register must be enabled by setting the
    OCxPE bit in the TIMx_CCMRx register*/
	//Bit 3 OC1PE: Output Compare 1 preload enable
	TIM1_CCMR1 |=(1<<3);
 8002730:	4b18      	ldr	r3, [pc, #96]	; (8002794 <Timer1_Init_PWM+0xd8>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a17      	ldr	r2, [pc, #92]	; (8002794 <Timer1_Init_PWM+0xd8>)
 8002736:	f043 0308 	orr.w	r3, r3, #8
 800273a:	6013      	str	r3, [r2, #0]
	//1: OC1 active low
	//TIM1_CCER |=(1<<1);


	//Bit 0 CC1E: Capture/Compare 1 output enable
	TIM1_CCER |=(1<<0);
 800273c:	4b16      	ldr	r3, [pc, #88]	; (8002798 <Timer1_Init_PWM+0xdc>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a15      	ldr	r2, [pc, #84]	; (8002798 <Timer1_Init_PWM+0xdc>)
 8002742:	f043 0301 	orr.w	r3, r3, #1
 8002746:	6013      	str	r3, [r2, #0]

	//Bits 12:14 OC1M: Output Compare 1 mode
	//110: PWM mode 1 - In upcounting, channel 4 is active as long as TIM1_CNT<TIM1_CCR4
	TIM1_CCMR2 |=(0b110<<12);
 8002748:	4b14      	ldr	r3, [pc, #80]	; (800279c <Timer1_Init_PWM+0xe0>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a13      	ldr	r2, [pc, #76]	; (800279c <Timer1_Init_PWM+0xe0>)
 800274e:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8002752:	6013      	str	r3, [r2, #0]

	/*=========================Channel 4 ==============================*/
	//Bit 11 OC4PE: Output compare 4 preload enable
	TIM1_CCMR2 |=(1<<11);
 8002754:	4b11      	ldr	r3, [pc, #68]	; (800279c <Timer1_Init_PWM+0xe0>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a10      	ldr	r2, [pc, #64]	; (800279c <Timer1_Init_PWM+0xe0>)
 800275a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800275e:	6013      	str	r3, [r2, #0]

	//Bit 12 CC4E: Capture/Compare 4 output enable
	TIM1_CCER |=(1<<12);
 8002760:	4b0d      	ldr	r3, [pc, #52]	; (8002798 <Timer1_Init_PWM+0xdc>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a0c      	ldr	r2, [pc, #48]	; (8002798 <Timer1_Init_PWM+0xdc>)
 8002766:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800276a:	6013      	str	r3, [r2, #0]
	//1: OC1 active low
	//TIM1_CCER |=(1<<13);


	//Bit 15 MOE: Main output enable
	TIM1_BDTR |=(1<<15);
 800276c:	4b0c      	ldr	r3, [pc, #48]	; (80027a0 <Timer1_Init_PWM+0xe4>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a0b      	ldr	r2, [pc, #44]	; (80027a0 <Timer1_Init_PWM+0xe4>)
 8002772:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002776:	6013      	str	r3, [r2, #0]
	//Bit 0 CEN: Counter enable
	//TIM1_CR1 |=(1<<0);



}
 8002778:	bf00      	nop
 800277a:	3708      	adds	r7, #8
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40010800 	.word	0x40010800
 8002784:	40021018 	.word	0x40021018
 8002788:	40012c00 	.word	0x40012c00
 800278c:	40012c28 	.word	0x40012c28
 8002790:	40012c2c 	.word	0x40012c2c
 8002794:	40012c18 	.word	0x40012c18
 8002798:	40012c20 	.word	0x40012c20
 800279c:	40012c1c 	.word	0x40012c1c
 80027a0:	40012c44 	.word	0x40012c44

080027a4 <Timer1_PWM1_Set_Value>:



void Timer1_PWM1_Set_Value(int PWM1)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
	//duty cycle determined by the value of the TIMx_CCRx register.
	TIM1_CCR1 = PWM1;
 80027ac:	4a06      	ldr	r2, [pc, #24]	; (80027c8 <Timer1_PWM1_Set_Value+0x24>)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6013      	str	r3, [r2, #0]
	//Bit 0 CEN: Counter enable
	TIM1_CR1 |=(1<<0);
 80027b2:	4b06      	ldr	r3, [pc, #24]	; (80027cc <Timer1_PWM1_Set_Value+0x28>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a05      	ldr	r2, [pc, #20]	; (80027cc <Timer1_PWM1_Set_Value+0x28>)
 80027b8:	f043 0301 	orr.w	r3, r3, #1
 80027bc:	6013      	str	r3, [r2, #0]
}
 80027be:	bf00      	nop
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bc80      	pop	{r7}
 80027c6:	4770      	bx	lr
 80027c8:	40012c34 	.word	0x40012c34
 80027cc:	40012c00 	.word	0x40012c00

080027d0 <Timer1_PWM2_Set_Value>:


void Timer1_PWM2_Set_Value(int PWM2)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
	//duty cycle determined by the value of the TIMx_CCRx register.
	TIM1_CCR4 = PWM2;
 80027d8:	4a06      	ldr	r2, [pc, #24]	; (80027f4 <Timer1_PWM2_Set_Value+0x24>)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6013      	str	r3, [r2, #0]
	//Bit 0 CEN: Counter enable
	TIM1_CR1 |=(1<<0);
 80027de:	4b06      	ldr	r3, [pc, #24]	; (80027f8 <Timer1_PWM2_Set_Value+0x28>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a05      	ldr	r2, [pc, #20]	; (80027f8 <Timer1_PWM2_Set_Value+0x28>)
 80027e4:	f043 0301 	orr.w	r3, r3, #1
 80027e8:	6013      	str	r3, [r2, #0]
}
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bc80      	pop	{r7}
 80027f2:	4770      	bx	lr
 80027f4:	40012c40 	.word	0x40012c40
 80027f8:	40012c00 	.word	0x40012c00

080027fc <Buzzer_Init>:
 */

#include "Buzzer.h"

void Buzzer_Init()
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
	//BUZZER AS ALRARM WHEN DESTANCE
	GPIO_Pin_Configure_t PinCfg1;
	PinCfg1.GPIO_Pin_Number=Buzzer_PINx;
 8002802:	2310      	movs	r3, #16
 8002804:	80bb      	strh	r3, [r7, #4]
	PinCfg1.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 8002806:	2304      	movs	r3, #4
 8002808:	71bb      	strb	r3, [r7, #6]
	PinCfg1.GPIO_OUTPUT_SPEED=GPIO_SPEED_10M;
 800280a:	2301      	movs	r3, #1
 800280c:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(Buzzer_PORTx, &PinCfg1);
 800280e:	1d3b      	adds	r3, r7, #4
 8002810:	4619      	mov	r1, r3
 8002812:	4806      	ldr	r0, [pc, #24]	; (800282c <Buzzer_Init+0x30>)
 8002814:	f7ff fde7 	bl	80023e6 <MCAL_GPIO_Init>
	MCAL_GPIO_WritePin(Buzzer_PORTx,Buzzer_PINx, 0);
 8002818:	2200      	movs	r2, #0
 800281a:	2110      	movs	r1, #16
 800281c:	4803      	ldr	r0, [pc, #12]	; (800282c <Buzzer_Init+0x30>)
 800281e:	f7ff fe5d 	bl	80024dc <MCAL_GPIO_WritePin>

}
 8002822:	bf00      	nop
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	40010c00 	.word	0x40010c00

08002830 <Buzzer_Alarm>:
void Buzzer_Alarm(bool State)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	4603      	mov	r3, r0
 8002838:	71fb      	strb	r3, [r7, #7]
	if(State == true)
 800283a:	79fb      	ldrb	r3, [r7, #7]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d005      	beq.n	800284c <Buzzer_Alarm+0x1c>
	{
		MCAL_GPIO_WritePin(Buzzer_PORTx, Buzzer_PINx, 1);
 8002840:	2201      	movs	r2, #1
 8002842:	2110      	movs	r1, #16
 8002844:	4809      	ldr	r0, [pc, #36]	; (800286c <Buzzer_Alarm+0x3c>)
 8002846:	f7ff fe49 	bl	80024dc <MCAL_GPIO_WritePin>
	}
	else if(State==false)
	{
		MCAL_GPIO_WritePin(Buzzer_PORTx,Buzzer_PINx, 0);
	}
}
 800284a:	e00a      	b.n	8002862 <Buzzer_Alarm+0x32>
	else if(State==false)
 800284c:	79fb      	ldrb	r3, [r7, #7]
 800284e:	f083 0301 	eor.w	r3, r3, #1
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2b00      	cmp	r3, #0
 8002856:	d004      	beq.n	8002862 <Buzzer_Alarm+0x32>
		MCAL_GPIO_WritePin(Buzzer_PORTx,Buzzer_PINx, 0);
 8002858:	2200      	movs	r2, #0
 800285a:	2110      	movs	r1, #16
 800285c:	4803      	ldr	r0, [pc, #12]	; (800286c <Buzzer_Alarm+0x3c>)
 800285e:	f7ff fe3d 	bl	80024dc <MCAL_GPIO_WritePin>
}
 8002862:	bf00      	nop
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	40010c00 	.word	0x40010c00

08002870 <Motor1_Init>:
 */

#include "DcMotor.h"

void Motor1_Init()
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
	GPIO_Pin_Configure_t PinCinfg;

	PinCinfg.GPIO_Pin_Number=GPIO_PIN_14;
 8002876:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800287a:	80bb      	strh	r3, [r7, #4]
	PinCinfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800287c:	2304      	movs	r3, #4
 800287e:	71bb      	strb	r3, [r7, #6]
	PinCinfg.GPIO_OUTPUT_SPEED=GPIO_SPEED_10M;
 8002880:	2301      	movs	r3, #1
 8002882:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, & PinCinfg);
 8002884:	1d3b      	adds	r3, r7, #4
 8002886:	4619      	mov	r1, r3
 8002888:	4809      	ldr	r0, [pc, #36]	; (80028b0 <Motor1_Init+0x40>)
 800288a:	f7ff fdac 	bl	80023e6 <MCAL_GPIO_Init>


	PinCinfg.GPIO_Pin_Number=GPIO_PIN_15;
 800288e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002892:	80bb      	strh	r3, [r7, #4]
	PinCinfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8002894:	2304      	movs	r3, #4
 8002896:	71bb      	strb	r3, [r7, #6]
	PinCinfg.GPIO_OUTPUT_SPEED=GPIO_SPEED_10M;
 8002898:	2301      	movs	r3, #1
 800289a:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, & PinCinfg);
 800289c:	1d3b      	adds	r3, r7, #4
 800289e:	4619      	mov	r1, r3
 80028a0:	4803      	ldr	r0, [pc, #12]	; (80028b0 <Motor1_Init+0x40>)
 80028a2:	f7ff fda0 	bl	80023e6 <MCAL_GPIO_Init>

}
 80028a6:	bf00      	nop
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	40010c00 	.word	0x40010c00

080028b4 <Motor1_Forward>:
void Motor1_Forward(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);//IN1
 80028b8:	2201      	movs	r2, #1
 80028ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028be:	4805      	ldr	r0, [pc, #20]	; (80028d4 <Motor1_Forward+0x20>)
 80028c0:	f7ff fe0c 	bl	80024dc <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);//IN2
 80028c4:	2200      	movs	r2, #0
 80028c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028ca:	4802      	ldr	r0, [pc, #8]	; (80028d4 <Motor1_Forward+0x20>)
 80028cc:	f7ff fe06 	bl	80024dc <MCAL_GPIO_WritePin>
}
 80028d0:	bf00      	nop
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40010c00 	.word	0x40010c00

080028d8 <Motor1_Backward>:

void Motor1_Backward(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//IN1
 80028dc:	2200      	movs	r2, #0
 80028de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028e2:	4805      	ldr	r0, [pc, #20]	; (80028f8 <Motor1_Backward+0x20>)
 80028e4:	f7ff fdfa 	bl	80024dc <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//IN2
 80028e8:	2201      	movs	r2, #1
 80028ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028ee:	4802      	ldr	r0, [pc, #8]	; (80028f8 <Motor1_Backward+0x20>)
 80028f0:	f7ff fdf4 	bl	80024dc <MCAL_GPIO_WritePin>
}
 80028f4:	bf00      	nop
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40010c00 	.word	0x40010c00

080028fc <Motor2_Init>:
	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);//IN2
}


void Motor2_Init()
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
	GPIO_Pin_Configure_t PinCinfg;

	PinCinfg.GPIO_Pin_Number=GPIO_PIN_7;
 8002902:	2380      	movs	r3, #128	; 0x80
 8002904:	80bb      	strh	r3, [r7, #4]
	PinCinfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8002906:	2304      	movs	r3, #4
 8002908:	71bb      	strb	r3, [r7, #6]
	PinCinfg.GPIO_OUTPUT_SPEED=GPIO_SPEED_10M;
 800290a:	2301      	movs	r3, #1
 800290c:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, & PinCinfg);
 800290e:	1d3b      	adds	r3, r7, #4
 8002910:	4619      	mov	r1, r3
 8002912:	4809      	ldr	r0, [pc, #36]	; (8002938 <Motor2_Init+0x3c>)
 8002914:	f7ff fd67 	bl	80023e6 <MCAL_GPIO_Init>


	PinCinfg.GPIO_Pin_Number=GPIO_PIN_8;
 8002918:	f44f 7380 	mov.w	r3, #256	; 0x100
 800291c:	80bb      	strh	r3, [r7, #4]
	PinCinfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800291e:	2304      	movs	r3, #4
 8002920:	71bb      	strb	r3, [r7, #6]
	PinCinfg.GPIO_OUTPUT_SPEED=GPIO_SPEED_10M;
 8002922:	2301      	movs	r3, #1
 8002924:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, & PinCinfg);
 8002926:	1d3b      	adds	r3, r7, #4
 8002928:	4619      	mov	r1, r3
 800292a:	4803      	ldr	r0, [pc, #12]	; (8002938 <Motor2_Init+0x3c>)
 800292c:	f7ff fd5b 	bl	80023e6 <MCAL_GPIO_Init>

}
 8002930:	bf00      	nop
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40010c00 	.word	0x40010c00

0800293c <Motor2_Forward>:
void Motor2_Forward(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);//IN1
 8002940:	2201      	movs	r2, #1
 8002942:	2180      	movs	r1, #128	; 0x80
 8002944:	4805      	ldr	r0, [pc, #20]	; (800295c <Motor2_Forward+0x20>)
 8002946:	f7ff fdc9 	bl	80024dc <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0);//IN2
 800294a:	2200      	movs	r2, #0
 800294c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002950:	4802      	ldr	r0, [pc, #8]	; (800295c <Motor2_Forward+0x20>)
 8002952:	f7ff fdc3 	bl	80024dc <MCAL_GPIO_WritePin>
}
 8002956:	bf00      	nop
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	40010c00 	.word	0x40010c00

08002960 <Motor2_Backward>:

void Motor2_Backward(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);//IN1
 8002964:	2200      	movs	r2, #0
 8002966:	2180      	movs	r1, #128	; 0x80
 8002968:	4805      	ldr	r0, [pc, #20]	; (8002980 <Motor2_Backward+0x20>)
 800296a:	f7ff fdb7 	bl	80024dc <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);//IN2
 800296e:	2201      	movs	r2, #1
 8002970:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002974:	4802      	ldr	r0, [pc, #8]	; (8002980 <Motor2_Backward+0x20>)
 8002976:	f7ff fdb1 	bl	80024dc <MCAL_GPIO_WritePin>
}
 800297a:	bf00      	nop
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	40010c00 	.word	0x40010c00

08002984 <DC_Motor>:
}



void DC_Motor(int NumMotor , int Direction , int Speed)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
	/*=========================Motor 1==============================*/
	if(NumMotor == THE_LEFT_MOTOR)//Motor 1
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d10f      	bne.n	80029b6 <DC_Motor+0x32>
	{
		if(Direction == Forward)
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d104      	bne.n	80029a6 <DC_Motor+0x22>
		{
			Timer1_PWM1_Set_Value(Speed);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f7ff ff01 	bl	80027a4 <Timer1_PWM1_Set_Value>
			Motor1_Forward();
 80029a2:	f7ff ff87 	bl	80028b4 <Motor1_Forward>
		}
		if(Direction==Backwards)
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d104      	bne.n	80029b6 <DC_Motor+0x32>
		{
			Timer1_PWM1_Set_Value(Speed);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f7ff fef9 	bl	80027a4 <Timer1_PWM1_Set_Value>
			Motor1_Backward();
 80029b2:	f7ff ff91 	bl	80028d8 <Motor1_Backward>

	}

	/*=========================Motor 2==============================*/

	if(NumMotor == THE_RIGHT_MOTOR)//Motor 1
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d10f      	bne.n	80029dc <DC_Motor+0x58>
	{
		if(Direction == Forward)
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d104      	bne.n	80029cc <DC_Motor+0x48>
		{
			Timer1_PWM2_Set_Value(Speed);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f7ff ff04 	bl	80027d0 <Timer1_PWM2_Set_Value>
			Motor2_Forward();
 80029c8:	f7ff ffb8 	bl	800293c <Motor2_Forward>
		}
		if(Direction==Backwards)
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d104      	bne.n	80029dc <DC_Motor+0x58>
		{
			Timer1_PWM2_Set_Value(Speed);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f7ff fefc 	bl	80027d0 <Timer1_PWM2_Set_Value>
			Motor2_Backward();
 80029d8:	f7ff ffc2 	bl	8002960 <Motor2_Backward>
		}
	}

}
 80029dc:	bf00      	nop
 80029de:	3710      	adds	r7, #16
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <WheelChair_Forward>:


/*=========================WheeelChair==============================*/

void WheelChair_Forward(int Speed)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
	DC_Motor(THE_LEFT_MOTOR,Forward,Speed);
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	2101      	movs	r1, #1
 80029f0:	2001      	movs	r0, #1
 80029f2:	f7ff ffc7 	bl	8002984 <DC_Motor>
	DC_Motor(THE_RIGHT_MOTOR,Forward,Speed);
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	2101      	movs	r1, #1
 80029fa:	2002      	movs	r0, #2
 80029fc:	f7ff ffc2 	bl	8002984 <DC_Motor>
}
 8002a00:	bf00      	nop
 8002a02:	3708      	adds	r7, #8
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <WheelChair_Backward>:
	Motor1_Stop();
	Motor2_Stop();
}

void WheelChair_Backward(int Speed)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
	DC_Motor(THE_LEFT_MOTOR,Backwards,Speed);
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	2100      	movs	r1, #0
 8002a14:	2001      	movs	r0, #1
 8002a16:	f7ff ffb5 	bl	8002984 <DC_Motor>
	DC_Motor(THE_RIGHT_MOTOR,Backwards,Speed);
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	2002      	movs	r0, #2
 8002a20:	f7ff ffb0 	bl	8002984 <DC_Motor>
}
 8002a24:	bf00      	nop
 8002a26:	3708      	adds	r7, #8
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <Ultrasonic_GPIO_Init>:
 * @param [in] -            -void
 * @retval -                -none
 */
/**================================================================= */
void Ultrasonic_GPIO_Init(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0

	GPIO_Pin_Configure_t PinCinfgUltrasonic;

	//Make Ultrasonic_Triger_Pin As Output
	PinCinfgUltrasonic.GPIO_Pin_Number=Ultrasonic_Triger_Pin;
 8002a32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a36:	80bb      	strh	r3, [r7, #4]
	PinCinfgUltrasonic.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8002a38:	2304      	movs	r3, #4
 8002a3a:	71bb      	strb	r3, [r7, #6]
	PinCinfgUltrasonic.GPIO_OUTPUT_SPEED=GPIO_SPEED_10M;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(Ultrasonic_PORT, & PinCinfgUltrasonic);
 8002a40:	1d3b      	adds	r3, r7, #4
 8002a42:	4619      	mov	r1, r3
 8002a44:	4808      	ldr	r0, [pc, #32]	; (8002a68 <Ultrasonic_GPIO_Init+0x3c>)
 8002a46:	f7ff fcce 	bl	80023e6 <MCAL_GPIO_Init>

	//Make Ultrasonic_Echo_Pin As Input
	PinCinfgUltrasonic.GPIO_Pin_Number=Ultrasonic_Echo_Pin;
 8002a4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a4e:	80bb      	strh	r3, [r7, #4]
	PinCinfgUltrasonic.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8002a50:	2301      	movs	r3, #1
 8002a52:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(Ultrasonic_PORT, & PinCinfgUltrasonic);
 8002a54:	1d3b      	adds	r3, r7, #4
 8002a56:	4619      	mov	r1, r3
 8002a58:	4803      	ldr	r0, [pc, #12]	; (8002a68 <Ultrasonic_GPIO_Init+0x3c>)
 8002a5a:	f7ff fcc4 	bl	80023e6 <MCAL_GPIO_Init>
}
 8002a5e:	bf00      	nop
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	40010c00 	.word	0x40010c00

08002a6c <Ultrasonic_Trigger>:
	{
		asm("NOP");
	}
}*/
void Ultrasonic_Trigger(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(Ultrasonic_PORT, Ultrasonic_Triger_Pin, 1);
 8002a70:	2201      	movs	r2, #1
 8002a72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a76:	4809      	ldr	r0, [pc, #36]	; (8002a9c <Ultrasonic_Trigger+0x30>)
 8002a78:	f7ff fd30 	bl	80024dc <MCAL_GPIO_WritePin>
	dus(10);
 8002a7c:	200a      	movs	r0, #10
 8002a7e:	f7ff fdcf 	bl	8002620 <dus>
	MCAL_GPIO_WritePin(Ultrasonic_PORT, Ultrasonic_Triger_Pin, 0);
 8002a82:	2200      	movs	r2, #0
 8002a84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a88:	4804      	ldr	r0, [pc, #16]	; (8002a9c <Ultrasonic_Trigger+0x30>)
 8002a8a:	f7ff fd27 	bl	80024dc <MCAL_GPIO_WritePin>
	dus(1000);
 8002a8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a92:	f7ff fdc5 	bl	8002620 <dus>

}
 8002a96:	bf00      	nop
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40010c00 	.word	0x40010c00

08002aa0 <__libc_init_array>:
 8002aa0:	b570      	push	{r4, r5, r6, lr}
 8002aa2:	2500      	movs	r5, #0
 8002aa4:	4e0c      	ldr	r6, [pc, #48]	; (8002ad8 <__libc_init_array+0x38>)
 8002aa6:	4c0d      	ldr	r4, [pc, #52]	; (8002adc <__libc_init_array+0x3c>)
 8002aa8:	1ba4      	subs	r4, r4, r6
 8002aaa:	10a4      	asrs	r4, r4, #2
 8002aac:	42a5      	cmp	r5, r4
 8002aae:	d109      	bne.n	8002ac4 <__libc_init_array+0x24>
 8002ab0:	f000 f822 	bl	8002af8 <_init>
 8002ab4:	2500      	movs	r5, #0
 8002ab6:	4e0a      	ldr	r6, [pc, #40]	; (8002ae0 <__libc_init_array+0x40>)
 8002ab8:	4c0a      	ldr	r4, [pc, #40]	; (8002ae4 <__libc_init_array+0x44>)
 8002aba:	1ba4      	subs	r4, r4, r6
 8002abc:	10a4      	asrs	r4, r4, #2
 8002abe:	42a5      	cmp	r5, r4
 8002ac0:	d105      	bne.n	8002ace <__libc_init_array+0x2e>
 8002ac2:	bd70      	pop	{r4, r5, r6, pc}
 8002ac4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ac8:	4798      	blx	r3
 8002aca:	3501      	adds	r5, #1
 8002acc:	e7ee      	b.n	8002aac <__libc_init_array+0xc>
 8002ace:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ad2:	4798      	blx	r3
 8002ad4:	3501      	adds	r5, #1
 8002ad6:	e7f2      	b.n	8002abe <__libc_init_array+0x1e>
 8002ad8:	08002ba4 	.word	0x08002ba4
 8002adc:	08002ba4 	.word	0x08002ba4
 8002ae0:	08002ba4 	.word	0x08002ba4
 8002ae4:	08002ba8 	.word	0x08002ba8

08002ae8 <memset>:
 8002ae8:	4603      	mov	r3, r0
 8002aea:	4402      	add	r2, r0
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d100      	bne.n	8002af2 <memset+0xa>
 8002af0:	4770      	bx	lr
 8002af2:	f803 1b01 	strb.w	r1, [r3], #1
 8002af6:	e7f9      	b.n	8002aec <memset+0x4>

08002af8 <_init>:
 8002af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002afa:	bf00      	nop
 8002afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002afe:	bc08      	pop	{r3}
 8002b00:	469e      	mov	lr, r3
 8002b02:	4770      	bx	lr

08002b04 <_fini>:
 8002b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b06:	bf00      	nop
 8002b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b0a:	bc08      	pop	{r3}
 8002b0c:	469e      	mov	lr, r3
 8002b0e:	4770      	bx	lr
